#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Mole_GrantItem_EmptyHand

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Mole_GrantItem_EmptyHand.GA_Mole_GrantItem_EmptyHand_C
// 0x0060 (0x0B70 - 0x0B10)
class UGA_Mole_GrantItem_EmptyHand_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B10(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TSoftObjectPtr<class UFortWorldItemDefinition> ID_to_Award;                                       // 0x0B18(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          Award_if_Already_has;                              // 0x0B40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B41[0x3];                                      // 0x0B41(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Number_of_Items_to_Add;                            // 0x0B44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  PlayerController;                                  // 0x0B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ItemWasAdded;                                      // 0x0B50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B51[0x3];                                      // 0x0B51(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Reattempt_Delay_on_PC_Failure;                     // 0x0B54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortWorldItemDefinition*               LoadedID;                                          // 0x0B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Equip_on_Award;                                    // 0x0B60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B61[0x3];                                      // 0x0B61(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Attempts_to_Equip_Item;                            // 0x0B64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delay_between_Equip_Attempts;                      // 0x0B68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AbilityEnding;                                     // 0x0B6C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Attempt_Award_Item();
	void Award_Item_To_Player(bool* Item_Spawned);
	void Ensure_Item_Doesn_t_Already_Exist(bool* Item_Does_not_Exist);
	void Equip_Awarded_Item();
	void ExecuteUbergraph_GA_Mole_GrantItem_EmptyHand(int32 EntryPoint);
	void FailedToActivatePassiveAbility();
	void IsItemEquipped(bool* Yes);
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void OnLoaded_9066A4274668558075CF08B971DAB23F(class UObject* Loaded);
	void Remove_Item_From_Player();
	void Set_Player_Controller_from_Avatar(bool* Found_PC);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Mole_GrantItem_EmptyHand_C">();
	}
	static class UGA_Mole_GrantItem_EmptyHand_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Mole_GrantItem_EmptyHand_C>();
	}
};
static_assert(alignof(UGA_Mole_GrantItem_EmptyHand_C) == 0x000008, "Wrong alignment on UGA_Mole_GrantItem_EmptyHand_C");
static_assert(sizeof(UGA_Mole_GrantItem_EmptyHand_C) == 0x000B70, "Wrong size on UGA_Mole_GrantItem_EmptyHand_C");
static_assert(offsetof(UGA_Mole_GrantItem_EmptyHand_C, UberGraphFrame) == 0x000B10, "Member 'UGA_Mole_GrantItem_EmptyHand_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Mole_GrantItem_EmptyHand_C, ID_to_Award) == 0x000B18, "Member 'UGA_Mole_GrantItem_EmptyHand_C::ID_to_Award' has a wrong offset!");
static_assert(offsetof(UGA_Mole_GrantItem_EmptyHand_C, Award_if_Already_has) == 0x000B40, "Member 'UGA_Mole_GrantItem_EmptyHand_C::Award_if_Already_has' has a wrong offset!");
static_assert(offsetof(UGA_Mole_GrantItem_EmptyHand_C, Number_of_Items_to_Add) == 0x000B44, "Member 'UGA_Mole_GrantItem_EmptyHand_C::Number_of_Items_to_Add' has a wrong offset!");
static_assert(offsetof(UGA_Mole_GrantItem_EmptyHand_C, PlayerController) == 0x000B48, "Member 'UGA_Mole_GrantItem_EmptyHand_C::PlayerController' has a wrong offset!");
static_assert(offsetof(UGA_Mole_GrantItem_EmptyHand_C, ItemWasAdded) == 0x000B50, "Member 'UGA_Mole_GrantItem_EmptyHand_C::ItemWasAdded' has a wrong offset!");
static_assert(offsetof(UGA_Mole_GrantItem_EmptyHand_C, Reattempt_Delay_on_PC_Failure) == 0x000B54, "Member 'UGA_Mole_GrantItem_EmptyHand_C::Reattempt_Delay_on_PC_Failure' has a wrong offset!");
static_assert(offsetof(UGA_Mole_GrantItem_EmptyHand_C, LoadedID) == 0x000B58, "Member 'UGA_Mole_GrantItem_EmptyHand_C::LoadedID' has a wrong offset!");
static_assert(offsetof(UGA_Mole_GrantItem_EmptyHand_C, Equip_on_Award) == 0x000B60, "Member 'UGA_Mole_GrantItem_EmptyHand_C::Equip_on_Award' has a wrong offset!");
static_assert(offsetof(UGA_Mole_GrantItem_EmptyHand_C, Attempts_to_Equip_Item) == 0x000B64, "Member 'UGA_Mole_GrantItem_EmptyHand_C::Attempts_to_Equip_Item' has a wrong offset!");
static_assert(offsetof(UGA_Mole_GrantItem_EmptyHand_C, Delay_between_Equip_Attempts) == 0x000B68, "Member 'UGA_Mole_GrantItem_EmptyHand_C::Delay_between_Equip_Attempts' has a wrong offset!");
static_assert(offsetof(UGA_Mole_GrantItem_EmptyHand_C, AbilityEnding) == 0x000B6C, "Member 'UGA_Mole_GrantItem_EmptyHand_C::AbilityEnding' has a wrong offset!");

}

