#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: M_MED_BunkerMan_Beard_CtrlRig

#include "Basic.hpp"

#include "RigVM_classes.hpp"
#include "ControlRig_structs.hpp"
#include "ControlRig_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// RigVMMemoryStorageGeneratorClass M_MED_BunkerMan_Beard_CtrlRig.RigVMMemory_Work
// 0x0298 (0x02C0 - 0x0028)
class M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work final : public URigVMMemoryStorage
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FControlRigExecuteContext              ExecuteContext_;                                   // 0x0030(0x0070)(Edit, EditConst, NonTransactional)
	struct FQuat                                  MathQuaternionMul_0_Result;                        // 0x00A0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FQuat                                  MathQuaternionFromTwoVectors_0_Result;             // 0x00C0(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FVector                                MathQuaternionGetAxis_0_Result;                    // 0x00E0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             GetBoneTransform_1_Transform;                      // 0x0100(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              GetBoneTransform_1_CachedBone;                     // 0x0160(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  MathQuaternionGetAxis_0_Quaternion;                // 0x0170(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	struct FVector                                MathVectorSub_0_Result;                            // 0x0190(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MathTransformTransformVector_0_Result;             // 0x01A8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             GetBoneTransform_0_Transform;                      // 0x01C0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              GetBoneTransform_0_CachedBone;                     // 0x0220(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                MathVectorSub_0_B;                                 // 0x0230(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              SetBoneRotation_0_CachedBone;                      // 0x0248(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_258[0x8];                                      // 0x0258(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             DebugTransformMutable_1_Transform__IO;             // 0x0260(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass M_MED_BunkerMan_Beard_CtrlRig.RigVMMemory_Work", true>();
	}
	static class M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work* GetDefaultObj()
	{
		return GetDefaultObjImpl<M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work>();
	}
};
static_assert(alignof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work) == 0x000010, "Wrong alignment on M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work");
static_assert(sizeof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work) == 0x0002C0, "Wrong size on M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work, ExecuteContext_) == 0x000030, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work::ExecuteContext_' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work, MathQuaternionMul_0_Result) == 0x0000A0, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work::MathQuaternionMul_0_Result' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work, MathQuaternionFromTwoVectors_0_Result) == 0x0000C0, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work::MathQuaternionFromTwoVectors_0_Result' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work, MathQuaternionGetAxis_0_Result) == 0x0000E0, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work::MathQuaternionGetAxis_0_Result' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work, GetBoneTransform_1_Transform) == 0x000100, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work::GetBoneTransform_1_Transform' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work, GetBoneTransform_1_CachedBone) == 0x000160, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work::GetBoneTransform_1_CachedBone' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work, MathQuaternionGetAxis_0_Quaternion) == 0x000170, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work::MathQuaternionGetAxis_0_Quaternion' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work, MathVectorSub_0_Result) == 0x000190, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work::MathVectorSub_0_Result' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work, MathTransformTransformVector_0_Result) == 0x0001A8, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work::MathTransformTransformVector_0_Result' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work, GetBoneTransform_0_Transform) == 0x0001C0, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work::GetBoneTransform_0_Transform' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work, GetBoneTransform_0_CachedBone) == 0x000220, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work::GetBoneTransform_0_CachedBone' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work, MathVectorSub_0_B) == 0x000230, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work::MathVectorSub_0_B' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work, SetBoneRotation_0_CachedBone) == 0x000248, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work::SetBoneRotation_0_CachedBone' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work, DebugTransformMutable_1_Transform__IO) == 0x000260, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Work::DebugTransformMutable_1_Transform__IO' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass M_MED_BunkerMan_Beard_CtrlRig.RigVMMemory_Literal
// 0x00B8 (0x00E0 - 0x0028)
class M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal final : public URigVMMemoryStorage
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             DebugTransformMutable_0_Transform__Const;          // 0x0030(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	ERigUnitDebugTransformMode                    DebugTransformMutable_0_Mode__Const;               // 0x0090(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DebugTransformMutable_0_Color__Const;              // 0x0094(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         DebugTransformMutable_0_Thickness__Const;          // 0x00A4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         DebugTransformMutable_0_Scale__Const;              // 0x00A8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   DebugTransformMutable_0_Space__Const;              // 0x00AC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         DebugTransformMutable_0_bEnabled__Const : 1;       // 0x00B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash))
	EBoneGetterSetterMode                         GetBoneTransform_1_Space__Const;                   // 0x00B1(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EAxis                                         MathQuaternionGetAxis_0_Axis__Const;               // 0x00B2(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B3[0x1];                                       // 0x00B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GetBoneTransform_0_Bone__Const;                    // 0x00B4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MathTransformTransformVector_0_Location__Const;    // 0x00B8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         SetBoneRotation_0_Weight__Const;                   // 0x00D0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         DebugTransformMutable_2_Scale__Const;              // 0x00D4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         DebugTransformMutable_1_Scale__Const;              // 0x00D8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   DebugTransformMutable_1_Space__Const;              // 0x00DC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass M_MED_BunkerMan_Beard_CtrlRig.RigVMMemory_Literal", true>();
	}
	static class M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal* GetDefaultObj()
	{
		return GetDefaultObjImpl<M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal>();
	}
};
static_assert(alignof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal) == 0x000010, "Wrong alignment on M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal");
static_assert(sizeof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal) == 0x0000E0, "Wrong size on M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal, DebugTransformMutable_0_Transform__Const) == 0x000030, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal::DebugTransformMutable_0_Transform__Const' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal, DebugTransformMutable_0_Mode__Const) == 0x000090, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal::DebugTransformMutable_0_Mode__Const' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal, DebugTransformMutable_0_Color__Const) == 0x000094, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal::DebugTransformMutable_0_Color__Const' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal, DebugTransformMutable_0_Thickness__Const) == 0x0000A4, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal::DebugTransformMutable_0_Thickness__Const' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal, DebugTransformMutable_0_Scale__Const) == 0x0000A8, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal::DebugTransformMutable_0_Scale__Const' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal, DebugTransformMutable_0_Space__Const) == 0x0000AC, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal::DebugTransformMutable_0_Space__Const' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal, GetBoneTransform_1_Space__Const) == 0x0000B1, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal::GetBoneTransform_1_Space__Const' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal, MathQuaternionGetAxis_0_Axis__Const) == 0x0000B2, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal::MathQuaternionGetAxis_0_Axis__Const' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal, GetBoneTransform_0_Bone__Const) == 0x0000B4, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal::GetBoneTransform_0_Bone__Const' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal, MathTransformTransformVector_0_Location__Const) == 0x0000B8, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal::MathTransformTransformVector_0_Location__Const' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal, SetBoneRotation_0_Weight__Const) == 0x0000D0, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal::SetBoneRotation_0_Weight__Const' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal, DebugTransformMutable_2_Scale__Const) == 0x0000D4, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal::DebugTransformMutable_2_Scale__Const' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal, DebugTransformMutable_1_Scale__Const) == 0x0000D8, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal::DebugTransformMutable_1_Scale__Const' has a wrong offset!");
static_assert(offsetof(M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal, DebugTransformMutable_1_Space__Const) == 0x0000DC, "Member 'M_MED_BunkerMan_Beard_CtrlRig::URigVMMemory_Literal::DebugTransformMutable_1_Space__Const' has a wrong offset!");

// ControlRigBlueprintGeneratedClass M_MED_BunkerMan_Beard_CtrlRig.M_MED_BunkerMan_Beard_CtrlRig_C
// 0x0920 (0x0DB0 - 0x0490)
class UM_MED_BunkerMan_Beard_CtrlRig_C final : public UControlRig
{
public:
	uint8                                         Pad_488[0x8];                                      // 0x0488(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_BeginExecution                BeginExecution_0;                                  // 0x0490(0x0080)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRigUnit_MathQuaternionGetAxis         MathQuaternionGetAxis_0;                           // 0x0510(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRigUnit_DebugTransformMutable         DebugTransformMutable_0;                           // 0x0560(0x0170)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRigUnit_MathVectorSub                 MathVectorSub_0;                                   // 0x06D0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRigUnit_MathQuaternionFromTwoVectors  MathQuaternionFromTwoVectors_0;                    // 0x0720(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRigUnit_MathQuaternionMul             MathQuaternionMul_0;                               // 0x0780(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRigUnit_SetBoneRotation               SetBoneRotation_0;                                 // 0x07F0(0x00E0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRigUnit_GetBoneTransform              GetBoneTransform_1;                                // 0x08D0(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRigUnit_GetBoneTransform              GetBoneTransform_0;                                // 0x0960(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRigUnit_DebugTransformMutable         DebugTransformMutable_2;                           // 0x09F0(0x0170)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRigUnit_MathVectorAbs                 MathVectorAbs_0;                                   // 0x0B60(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance)
	uint8                                         Pad_B98[0x8];                                      // 0x0B98(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_MathTransformTransformVector  MathTransformTransformVector_0;                    // 0x0BA0(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRigUnit_DebugTransformMutable         DebugTransformMutable_1;                           // 0x0C40(0x0170)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"M_MED_BunkerMan_Beard_CtrlRig_C">();
	}
	static class UM_MED_BunkerMan_Beard_CtrlRig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UM_MED_BunkerMan_Beard_CtrlRig_C>();
	}
};
static_assert(alignof(UM_MED_BunkerMan_Beard_CtrlRig_C) == 0x000010, "Wrong alignment on UM_MED_BunkerMan_Beard_CtrlRig_C");
static_assert(sizeof(UM_MED_BunkerMan_Beard_CtrlRig_C) == 0x000DB0, "Wrong size on UM_MED_BunkerMan_Beard_CtrlRig_C");
static_assert(offsetof(UM_MED_BunkerMan_Beard_CtrlRig_C, BeginExecution_0) == 0x000490, "Member 'UM_MED_BunkerMan_Beard_CtrlRig_C::BeginExecution_0' has a wrong offset!");
static_assert(offsetof(UM_MED_BunkerMan_Beard_CtrlRig_C, MathQuaternionGetAxis_0) == 0x000510, "Member 'UM_MED_BunkerMan_Beard_CtrlRig_C::MathQuaternionGetAxis_0' has a wrong offset!");
static_assert(offsetof(UM_MED_BunkerMan_Beard_CtrlRig_C, DebugTransformMutable_0) == 0x000560, "Member 'UM_MED_BunkerMan_Beard_CtrlRig_C::DebugTransformMutable_0' has a wrong offset!");
static_assert(offsetof(UM_MED_BunkerMan_Beard_CtrlRig_C, MathVectorSub_0) == 0x0006D0, "Member 'UM_MED_BunkerMan_Beard_CtrlRig_C::MathVectorSub_0' has a wrong offset!");
static_assert(offsetof(UM_MED_BunkerMan_Beard_CtrlRig_C, MathQuaternionFromTwoVectors_0) == 0x000720, "Member 'UM_MED_BunkerMan_Beard_CtrlRig_C::MathQuaternionFromTwoVectors_0' has a wrong offset!");
static_assert(offsetof(UM_MED_BunkerMan_Beard_CtrlRig_C, MathQuaternionMul_0) == 0x000780, "Member 'UM_MED_BunkerMan_Beard_CtrlRig_C::MathQuaternionMul_0' has a wrong offset!");
static_assert(offsetof(UM_MED_BunkerMan_Beard_CtrlRig_C, SetBoneRotation_0) == 0x0007F0, "Member 'UM_MED_BunkerMan_Beard_CtrlRig_C::SetBoneRotation_0' has a wrong offset!");
static_assert(offsetof(UM_MED_BunkerMan_Beard_CtrlRig_C, GetBoneTransform_1) == 0x0008D0, "Member 'UM_MED_BunkerMan_Beard_CtrlRig_C::GetBoneTransform_1' has a wrong offset!");
static_assert(offsetof(UM_MED_BunkerMan_Beard_CtrlRig_C, GetBoneTransform_0) == 0x000960, "Member 'UM_MED_BunkerMan_Beard_CtrlRig_C::GetBoneTransform_0' has a wrong offset!");
static_assert(offsetof(UM_MED_BunkerMan_Beard_CtrlRig_C, DebugTransformMutable_2) == 0x0009F0, "Member 'UM_MED_BunkerMan_Beard_CtrlRig_C::DebugTransformMutable_2' has a wrong offset!");
static_assert(offsetof(UM_MED_BunkerMan_Beard_CtrlRig_C, MathVectorAbs_0) == 0x000B60, "Member 'UM_MED_BunkerMan_Beard_CtrlRig_C::MathVectorAbs_0' has a wrong offset!");
static_assert(offsetof(UM_MED_BunkerMan_Beard_CtrlRig_C, MathTransformTransformVector_0) == 0x000BA0, "Member 'UM_MED_BunkerMan_Beard_CtrlRig_C::MathTransformTransformVector_0' has a wrong offset!");
static_assert(offsetof(UM_MED_BunkerMan_Beard_CtrlRig_C, DebugTransformMutable_1) == 0x000C40, "Member 'UM_MED_BunkerMan_Beard_CtrlRig_C::DebugTransformMutable_1' has a wrong offset!");

}

