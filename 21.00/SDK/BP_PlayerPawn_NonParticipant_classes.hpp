#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerPawn_NonParticipant

#include "Basic.hpp"

#include "GameplayTags_0_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteAI_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "BP_PlayerPawn_Athena_Phoebe_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerPawn_NonParticipant.BP_PlayerPawn_NonParticipant_C
// 0x0170 (0x5A30 - 0x58C0)
class ABP_PlayerPawn_NonParticipant_C : public ABP_PlayerPawn_Athena_Phoebe_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_PlayerPawn_NonParticipant_C;     // 0x58C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortAthenaAlertStateComponent*         FortAthenaAlertState;                              // 0x58C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        VOAudioComponent;                                  // 0x58D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          UseAlertness;                                      // 0x58D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseVO;                                             // 0x58D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseIdleVO;                                         // 0x58DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDropExtraLootOnDeath;                           // 0x58DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseFullBodyHitReact;                               // 0x58DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAlertLevel                                   AlertLevel;                                        // 0x58DD(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	EAlertLevel                                   OldAlertLevel;                                     // 0x58DE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58DF[0x1];                                     // 0x58DF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GameplayCueAlertState;                             // 0x58E0(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58E4[0x4];                                     // 0x58E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_NPC_Status_Stressed_Infinite;                   // 0x58E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_NPC_Status_Stressed_Cooldown;                   // 0x58F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDistanceToTargetToPlayCombatAlertAnimation;     // 0x58F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58FC[0x4];                                     // 0x58FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MinIdleVODelay;                                    // 0x5900(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         MaxIdleVODelay;                                    // 0x5928(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   LootTierNameToSpawnWhenDead;                       // 0x5950(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LootTier_Medium;                                   // 0x5954(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LootTier_Shell;                                    // 0x5958(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LootTier_Heavy;                                    // 0x595C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LootTier_Light;                                    // 0x5960(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LootTier_Rockets;                                  // 0x5964(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortGameplayDataTrackerComponentManager* DataTrackerComponentManager;                       // 0x5968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AlertLevelUnawareTag;                              // 0x5970(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AlertLevelAlertedTag;                              // 0x5974(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AlertLevelAggressiveTag;                           // 0x5978(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TC_DisguiseTag;                                    // 0x597C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_RemoveDisguise;                                 // 0x5980(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortAbilitySet*                        HitReactAbilitySet;                                // 0x5988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           DefaultFullbodyHitReactionMontage;                 // 0x5990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortPatrolAnimAsset*                   CurrentPatrolAnimAsset;                            // 0x5998(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 PatrolLayerAnimBP;                                 // 0x59A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFortPatrolAnimSetWeaponPair>   PatrolAnimSetPairs;                                // 0x59A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bShouldDoFullAnimationUpdate;                      // 0x59B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59B9[0x3];                                     // 0x59B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            GEDuelHandle;                                      // 0x59BC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59C4[0x4];                                     // 0x59C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_DuelTag;                                        // 0x59C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        Challenger;                                        // 0x59D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 OverrideLayerAnimBP;                               // 0x59D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortPatrolAnimAsset*                   FallbackPatrolAnimAsset;                           // 0x59E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Quantize_VO_To_Music;                              // 0x59E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59E9[0x7];                                     // 0x59E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuartzQuantizationBoundary            QuantizationBoundary;                              // 0x59F0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   VO_QuantizationClockName;                          // 0x5A10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsInVehicleThatSupportsNoAlertState;              // 0x5A14(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A15[0x3];                                     // 0x5A15(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            GE_Quest_Converted_Handle;                         // 0x5A18(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            GE_Quest_Converted_HireNPC;                        // 0x5A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USoundBase*                             DeathFX_Sound;                                     // 0x5A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void UpdatePatrolAnimSet(class AFortWeapon* NewWeapon);
	void UpdateAlertStateVehicleCheck();
	void TriggerIdleVO();
	void SetupLootTierNameWithWeapon();
	void SetDataTrackerActorStateFromAlertLevel(EAlertLevel AlertLevel_0);
	void SetChallenger(class AFortPlayerPawn* Challenger_0);
	void SetAlertedStateGameplayCue(bool Alerted, bool Combat);
	void ReLinkAnimLayer();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void PlayVoiceSoundByTag(const struct FGameplayTag& SoundBankTag);
	void PlayVoiceComponentSoundByTag(const struct FGameplayTag& SoundBankTag, class UAudioComponent** AudioComponent);
	void PlayAlertLevelVO(EAlertLevel OldAlertLevel_0, EAlertLevel NewAlertLevel);
	void OnWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon);
	void OnWeaponAttachmentChangedDelegate_Event_0(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon);
	void OnRep_bIsInVehicleThatSupportsNoAlertState();
	void OnRep_AlertLevel();
	void OnExitedVehicleEvent();
	void OnExitedVehicle();
	void OnEnteredVehicleEvent();
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDBNOStateChanged_Event(class AFortPawn* FortPawn, bool bInIsDBNO);
	void OnCharacterCustomizationCompleted(class AFortPlayerPawn* Pawn);
	void OnAnimInputEvent(const class UFortAnimInputEvent* AnimInputEvent);
	void OnAlertLEvelCHangedEvent(class AFortAthenaAIBotController* BotController, EAlertLevel OldAlertLevel_0, EAlertLevel NewAlertLevel);
	void LinkPatrolAnimLayer();
	void LinkOverrideAnimLayer();
	void InitializeAnimInstanceSettings();
	void HandleAlertStateUpdates();
	void GetCurrentFullbodyHitReactionMontage(class UAnimMontage** CurrentMontage);
	void GameplayCue_Player_Interrogation_Voice_PickedUp(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void ExecuteUbergraph_BP_PlayerPawn_NonParticipant(int32 EntryPoint);
	void DataTrackerSetup(bool Is_Registering);
	void ClientOnAlertLevelChanged(EAlertLevel OldAlertLevel_0, EAlertLevel NewAlertLevel);
	void ChallengerDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void BndEvt__ConvertComponent_K2Node_ComponentBoundEvent_1_UnconvertedEvent__DelegateSignature(class AFortPawn* UnconvertedPawn);
	void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__BP_PlayerPawn_NonParticipant_ConvertComponent_K2Node_ComponentBoundEvent_1_ConvertedEvent__DelegateSignature(class AFortPawn* InstigatorPawn, class AFortPawn* ConvertedPawn);
	void AlertLevelChanged(EAlertLevel OldAlertLevel_0, EAlertLevel InputPin);
	void ActivateAlertDBNOCleanUp();

	void GetIconPlacement(const class AActor* SelfActor, const class AActor* ViewingActor, struct FVector* OutLocation, struct FVector* OutExtents) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerPawn_NonParticipant_C">();
	}
	static class ABP_PlayerPawn_NonParticipant_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerPawn_NonParticipant_C>();
	}
};
static_assert(alignof(ABP_PlayerPawn_NonParticipant_C) == 0x000010, "Wrong alignment on ABP_PlayerPawn_NonParticipant_C");
static_assert(sizeof(ABP_PlayerPawn_NonParticipant_C) == 0x005A30, "Wrong size on ABP_PlayerPawn_NonParticipant_C");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, UberGraphFrame_BP_PlayerPawn_NonParticipant_C) == 0x0058C0, "Member 'ABP_PlayerPawn_NonParticipant_C::UberGraphFrame_BP_PlayerPawn_NonParticipant_C' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, FortAthenaAlertState) == 0x0058C8, "Member 'ABP_PlayerPawn_NonParticipant_C::FortAthenaAlertState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, VOAudioComponent) == 0x0058D0, "Member 'ABP_PlayerPawn_NonParticipant_C::VOAudioComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, UseAlertness) == 0x0058D8, "Member 'ABP_PlayerPawn_NonParticipant_C::UseAlertness' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, UseVO) == 0x0058D9, "Member 'ABP_PlayerPawn_NonParticipant_C::UseVO' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, UseIdleVO) == 0x0058DA, "Member 'ABP_PlayerPawn_NonParticipant_C::UseIdleVO' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, UseDropExtraLootOnDeath) == 0x0058DB, "Member 'ABP_PlayerPawn_NonParticipant_C::UseDropExtraLootOnDeath' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, UseFullBodyHitReact) == 0x0058DC, "Member 'ABP_PlayerPawn_NonParticipant_C::UseFullBodyHitReact' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, AlertLevel) == 0x0058DD, "Member 'ABP_PlayerPawn_NonParticipant_C::AlertLevel' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, OldAlertLevel) == 0x0058DE, "Member 'ABP_PlayerPawn_NonParticipant_C::OldAlertLevel' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, GameplayCueAlertState) == 0x0058E0, "Member 'ABP_PlayerPawn_NonParticipant_C::GameplayCueAlertState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, GE_NPC_Status_Stressed_Infinite) == 0x0058E8, "Member 'ABP_PlayerPawn_NonParticipant_C::GE_NPC_Status_Stressed_Infinite' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, GE_NPC_Status_Stressed_Cooldown) == 0x0058F0, "Member 'ABP_PlayerPawn_NonParticipant_C::GE_NPC_Status_Stressed_Cooldown' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, MinDistanceToTargetToPlayCombatAlertAnimation) == 0x0058F8, "Member 'ABP_PlayerPawn_NonParticipant_C::MinDistanceToTargetToPlayCombatAlertAnimation' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, MinIdleVODelay) == 0x005900, "Member 'ABP_PlayerPawn_NonParticipant_C::MinIdleVODelay' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, MaxIdleVODelay) == 0x005928, "Member 'ABP_PlayerPawn_NonParticipant_C::MaxIdleVODelay' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, LootTierNameToSpawnWhenDead) == 0x005950, "Member 'ABP_PlayerPawn_NonParticipant_C::LootTierNameToSpawnWhenDead' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, LootTier_Medium) == 0x005954, "Member 'ABP_PlayerPawn_NonParticipant_C::LootTier_Medium' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, LootTier_Shell) == 0x005958, "Member 'ABP_PlayerPawn_NonParticipant_C::LootTier_Shell' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, LootTier_Heavy) == 0x00595C, "Member 'ABP_PlayerPawn_NonParticipant_C::LootTier_Heavy' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, LootTier_Light) == 0x005960, "Member 'ABP_PlayerPawn_NonParticipant_C::LootTier_Light' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, LootTier_Rockets) == 0x005964, "Member 'ABP_PlayerPawn_NonParticipant_C::LootTier_Rockets' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, DataTrackerComponentManager) == 0x005968, "Member 'ABP_PlayerPawn_NonParticipant_C::DataTrackerComponentManager' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, AlertLevelUnawareTag) == 0x005970, "Member 'ABP_PlayerPawn_NonParticipant_C::AlertLevelUnawareTag' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, AlertLevelAlertedTag) == 0x005974, "Member 'ABP_PlayerPawn_NonParticipant_C::AlertLevelAlertedTag' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, AlertLevelAggressiveTag) == 0x005978, "Member 'ABP_PlayerPawn_NonParticipant_C::AlertLevelAggressiveTag' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, TC_DisguiseTag) == 0x00597C, "Member 'ABP_PlayerPawn_NonParticipant_C::TC_DisguiseTag' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, GE_RemoveDisguise) == 0x005980, "Member 'ABP_PlayerPawn_NonParticipant_C::GE_RemoveDisguise' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, HitReactAbilitySet) == 0x005988, "Member 'ABP_PlayerPawn_NonParticipant_C::HitReactAbilitySet' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, DefaultFullbodyHitReactionMontage) == 0x005990, "Member 'ABP_PlayerPawn_NonParticipant_C::DefaultFullbodyHitReactionMontage' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, CurrentPatrolAnimAsset) == 0x005998, "Member 'ABP_PlayerPawn_NonParticipant_C::CurrentPatrolAnimAsset' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, PatrolLayerAnimBP) == 0x0059A0, "Member 'ABP_PlayerPawn_NonParticipant_C::PatrolLayerAnimBP' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, PatrolAnimSetPairs) == 0x0059A8, "Member 'ABP_PlayerPawn_NonParticipant_C::PatrolAnimSetPairs' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, bShouldDoFullAnimationUpdate) == 0x0059B8, "Member 'ABP_PlayerPawn_NonParticipant_C::bShouldDoFullAnimationUpdate' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, GEDuelHandle) == 0x0059BC, "Member 'ABP_PlayerPawn_NonParticipant_C::GEDuelHandle' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, GE_DuelTag) == 0x0059C8, "Member 'ABP_PlayerPawn_NonParticipant_C::GE_DuelTag' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, Challenger) == 0x0059D0, "Member 'ABP_PlayerPawn_NonParticipant_C::Challenger' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, OverrideLayerAnimBP) == 0x0059D8, "Member 'ABP_PlayerPawn_NonParticipant_C::OverrideLayerAnimBP' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, FallbackPatrolAnimAsset) == 0x0059E0, "Member 'ABP_PlayerPawn_NonParticipant_C::FallbackPatrolAnimAsset' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, Quantize_VO_To_Music) == 0x0059E8, "Member 'ABP_PlayerPawn_NonParticipant_C::Quantize_VO_To_Music' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, QuantizationBoundary) == 0x0059F0, "Member 'ABP_PlayerPawn_NonParticipant_C::QuantizationBoundary' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, VO_QuantizationClockName) == 0x005A10, "Member 'ABP_PlayerPawn_NonParticipant_C::VO_QuantizationClockName' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, bIsInVehicleThatSupportsNoAlertState) == 0x005A14, "Member 'ABP_PlayerPawn_NonParticipant_C::bIsInVehicleThatSupportsNoAlertState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, GE_Quest_Converted_Handle) == 0x005A18, "Member 'ABP_PlayerPawn_NonParticipant_C::GE_Quest_Converted_Handle' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, GE_Quest_Converted_HireNPC) == 0x005A20, "Member 'ABP_PlayerPawn_NonParticipant_C::GE_Quest_Converted_HireNPC' has a wrong offset!");
static_assert(offsetof(ABP_PlayerPawn_NonParticipant_C, DeathFX_Sound) == 0x005A28, "Member 'ABP_PlayerPawn_NonParticipant_C::DeathFX_Sound' has a wrong offset!");

}

