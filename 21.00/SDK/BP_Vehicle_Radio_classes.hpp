#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Vehicle_Radio

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Vehicle_Radio.BP_Vehicle_Radio_C
// 0x0058 (0x02C8 - 0x0270)
class ABP_Vehicle_Radio_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UMediaSoundComponent*                   RadioSpeaker;                                      // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMediaPlayer*                           RadioMediaPlayer;                                  // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortStreamMediaSource*                 RadioMediaSource;                                  // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         RadioStations;                                     // 0x0298(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         RadioRetryCounter;                                 // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RadioRetries;                                      // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 RadioURL;                                          // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          RadioURLFailure;                                   // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RadioStationIndex;                                 // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Vehicle_Radio(int32 EntryPoint);
	void PlayRadio(const class FString& RetrievedUrl);
	void RadioClosed();
	void RadioOpenFailed(const class FString& FailedUrl);
	void RadioPlay(const class FString& URL);
	void RadioRetry();
	void RadioSendAnalytics();
	void RadioUnbindEvents(bool JustURL);
	void RadioURLFailed(const class FString& RetrievedUrl);
	void ReceiveBeginPlay();
	void StartRadio(int32 StationIndex);
	void StopRadio();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Vehicle_Radio_C">();
	}
	static class ABP_Vehicle_Radio_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Vehicle_Radio_C>();
	}
};
static_assert(alignof(ABP_Vehicle_Radio_C) == 0x000008, "Wrong alignment on ABP_Vehicle_Radio_C");
static_assert(sizeof(ABP_Vehicle_Radio_C) == 0x0002C8, "Wrong size on ABP_Vehicle_Radio_C");
static_assert(offsetof(ABP_Vehicle_Radio_C, UberGraphFrame) == 0x000270, "Member 'ABP_Vehicle_Radio_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Vehicle_Radio_C, RadioSpeaker) == 0x000278, "Member 'ABP_Vehicle_Radio_C::RadioSpeaker' has a wrong offset!");
static_assert(offsetof(ABP_Vehicle_Radio_C, DefaultSceneRoot) == 0x000280, "Member 'ABP_Vehicle_Radio_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Vehicle_Radio_C, RadioMediaPlayer) == 0x000288, "Member 'ABP_Vehicle_Radio_C::RadioMediaPlayer' has a wrong offset!");
static_assert(offsetof(ABP_Vehicle_Radio_C, RadioMediaSource) == 0x000290, "Member 'ABP_Vehicle_Radio_C::RadioMediaSource' has a wrong offset!");
static_assert(offsetof(ABP_Vehicle_Radio_C, RadioStations) == 0x000298, "Member 'ABP_Vehicle_Radio_C::RadioStations' has a wrong offset!");
static_assert(offsetof(ABP_Vehicle_Radio_C, RadioRetryCounter) == 0x0002A8, "Member 'ABP_Vehicle_Radio_C::RadioRetryCounter' has a wrong offset!");
static_assert(offsetof(ABP_Vehicle_Radio_C, RadioRetries) == 0x0002AC, "Member 'ABP_Vehicle_Radio_C::RadioRetries' has a wrong offset!");
static_assert(offsetof(ABP_Vehicle_Radio_C, RadioURL) == 0x0002B0, "Member 'ABP_Vehicle_Radio_C::RadioURL' has a wrong offset!");
static_assert(offsetof(ABP_Vehicle_Radio_C, RadioURLFailure) == 0x0002C0, "Member 'ABP_Vehicle_Radio_C::RadioURLFailure' has a wrong offset!");
static_assert(offsetof(ABP_Vehicle_Radio_C, RadioStationIndex) == 0x0002C4, "Member 'ABP_Vehicle_Radio_C::RadioStationIndex' has a wrong offset!");

}

