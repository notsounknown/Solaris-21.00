#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MountedTurret

#include "Basic.hpp"

#include "GameplayTags_0_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass MountedTurret.MountedTurret_C
// 0x0170 (0x1CB0 - 0x1B40)
#pragma pack(push, 0x1)
class alignas(0x10) AMountedTurret_C : public AFortMountedTurret
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1B40(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortLinkToActorComponent*              FortLinkToActorComp;                               // 0x1B48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioOverheat;                                     // 0x1B50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioOnOverheat;                                   // 0x1B58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortLayeredAudioComponent*             ServoAudioComponent;                               // 0x1B60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAimingWeaponComp*           FortVehicleAimingWeaponComp;                       // 0x1B68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      PawnCollision;                                     // 0x1B70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               OverHeatScreen_R;                                  // 0x1B78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               OverHeatScreen_L;                                  // 0x1B80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               OverheatSmoke;                                     // 0x1B88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               MagazineGlowR;                                     // 0x1B90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               MagazineGlowL;                                     // 0x1B98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               BarrelGlowL;                                       // 0x1BA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               BarrelGlowR;                                       // 0x1BA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          OverlapVolume;                                     // 0x1BB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OnDeathSound;                                      // 0x1BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_BlockWeaponFire;                                // 0x1BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_GrantWeapon;                                    // 0x1BC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        DriverPawn;                                        // 0x1BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            GE_EnterTurret;                                    // 0x1BD8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           PlayerEnterAnimation;                              // 0x1BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           TurretEnterAnimation;                              // 0x1BE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           PlayerFireAnimation;                               // 0x1BF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortWeapon*                            PlayerWeapon;                                      // 0x1BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortWeaponRangedDual*                  TurretWeapon;                                      // 0x1C00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           GetWeaponTimer;                                    // 0x1C08(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           OverheatCostmeticTimer;                            // 0x1C10(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           TurretFireLeftAnimation;                           // 0x1C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           TurretFireRightAnimation;                          // 0x1C20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            OverheatAudioCurve;                                // 0x1C28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TurretRotation;                                    // 0x1C30(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                           TurretStartAnimation;                              // 0x1C48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           TurretExitAnimation;                               // 0x1C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZeroIfOverheating;                                 // 0x1C58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanInteract;                                      // 0x1C5C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C5D[0x3];                                     // 0x1C5D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         fInteractionDelay;                                 // 0x1C60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         fInteractionDelayOffset;                           // 0x1C64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FGameplayTag>                   Hide_HUD_Gameplay_Tags;                            // 0x1C68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         ReplicateOverheatOf20;                             // 0x1C78(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C7C[0x4];                                     // 0x1C7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           OverheatOnServerTimer;                             // 0x1C80(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bStartMountedTurretAwake;                          // 0x1C88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C89[0x7];                                     // 0x1C89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerControllerGameplay*          DriverControllerGameplay;                          // 0x1C90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ServoSound;                                        // 0x1C98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSkipOverheatBind;                                 // 0x1CA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__FortVehicleAimingWeaponComp_K2Node_ComponentBoundEvent_0_OnOverheatStateChanged__DelegateSignature(EFortWeaponOverheatState OverheatState);
	void BndEvt__MountedCannon__v2_FortLinkToActorComp_K2Node_ComponentBoundEvent_0_OnLinkedActorDestroyed__DelegateSignature(class AActor* DamageCauser);
	bool BP_CanInteract(class AController* InController);
	void CallNativeUpdateOverheatCosmetics();
	void Clear_FX_And_AudioTimer();
	float CurrentOverheatScalar();
	void Event_On_Weapon_Fired(EDualWeaponHand Hand, bool bPersistantFire);
	void ExecuteUbergraph_MountedTurret(int32 EntryPoint);
	void Get_Turret_Weapon();
	void HideQuickBarForAbility(bool Hide);
	void OnBlendOut_1E67D99B41450F4F37BDBF8C6F8AAE0B(class FName NotifyName);
	void OnBlendOut_43B2536B49D71F6DB759A49367555C0D(class FName NotifyName);
	void OnBlendOut_761292E24A89E794B70E9C9206892380(class FName NotifyName);
	void OnBlendOut_BE998F90462B0AB8D888EB90F677D680(class FName NotifyName);
	void OnBlendOut_C545F8F445E4AE78043EFD8678F12483(class FName NotifyName);
	void OnBlendOut_DC5D83234D74654A536804AC35F92FE4(class FName NotifyName);
	void OnBlendOut_F3BC573B4FBE468D904567BB4DB89D59(class FName NotifyName);
	void OnCompleted_1E67D99B41450F4F37BDBF8C6F8AAE0B(class FName NotifyName);
	void OnCompleted_43B2536B49D71F6DB759A49367555C0D(class FName NotifyName);
	void OnCompleted_761292E24A89E794B70E9C9206892380(class FName NotifyName);
	void OnCompleted_BE998F90462B0AB8D888EB90F677D680(class FName NotifyName);
	void OnCompleted_C545F8F445E4AE78043EFD8678F12483(class FName NotifyName);
	void OnCompleted_DC5D83234D74654A536804AC35F92FE4(class FName NotifyName);
	void OnCompleted_F3BC573B4FBE468D904567BB4DB89D59(class FName NotifyName);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnGetExitSocketTransform(const class FName ExitSocket, const int32 SocketIndex, const struct FTransform& InTransform, bool* bOutOverriderExitSocket, struct FTransform* OutOverrideTransform);
	void OnHoldExitStarted(class AFortPawn* ExitingPawn, const float ExitDuration);
	void OnHoldExitStopped(class AFortPawn* ExitingPawn);
	void OnInterrupted_1E67D99B41450F4F37BDBF8C6F8AAE0B(class FName NotifyName);
	void OnInterrupted_43B2536B49D71F6DB759A49367555C0D(class FName NotifyName);
	void OnInterrupted_761292E24A89E794B70E9C9206892380(class FName NotifyName);
	void OnInterrupted_BE998F90462B0AB8D888EB90F677D680(class FName NotifyName);
	void OnInterrupted_C545F8F445E4AE78043EFD8678F12483(class FName NotifyName);
	void OnInterrupted_DC5D83234D74654A536804AC35F92FE4(class FName NotifyName);
	void OnInterrupted_F3BC573B4FBE468D904567BB4DB89D59(class FName NotifyName);
	void OnNotifyBegin_1E67D99B41450F4F37BDBF8C6F8AAE0B(class FName NotifyName);
	void OnNotifyBegin_43B2536B49D71F6DB759A49367555C0D(class FName NotifyName);
	void OnNotifyBegin_761292E24A89E794B70E9C9206892380(class FName NotifyName);
	void OnNotifyBegin_BE998F90462B0AB8D888EB90F677D680(class FName NotifyName);
	void OnNotifyBegin_C545F8F445E4AE78043EFD8678F12483(class FName NotifyName);
	void OnNotifyBegin_DC5D83234D74654A536804AC35F92FE4(class FName NotifyName);
	void OnNotifyBegin_F3BC573B4FBE468D904567BB4DB89D59(class FName NotifyName);
	void OnNotifyEnd_1E67D99B41450F4F37BDBF8C6F8AAE0B(class FName NotifyName);
	void OnNotifyEnd_43B2536B49D71F6DB759A49367555C0D(class FName NotifyName);
	void OnNotifyEnd_761292E24A89E794B70E9C9206892380(class FName NotifyName);
	void OnNotifyEnd_BE998F90462B0AB8D888EB90F677D680(class FName NotifyName);
	void OnNotifyEnd_C545F8F445E4AE78043EFD8678F12483(class FName NotifyName);
	void OnNotifyEnd_DC5D83234D74654A536804AC35F92FE4(class FName NotifyName);
	void OnNotifyEnd_F3BC573B4FBE468D904567BB4DB89D59(class FName NotifyName);
	void OnPawnEnterVehicle(class AFortPlayerPawn* PlayerPawn, const int32 SeatIdx);
	void OnPawnExitVehicle(class AFortPlayerPawn* PlayerPawn, class FName ExitSocketName);
	void overheat_changed(float CurrentValue, float MaxValue, EFortWeaponOverheatState State, bool bIsInCooldown);
	void PlayDeathEffects();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Set_Magazine_Size_Coefficient(float Ammo_Pool);
	void Start_FX_And_Audio_Timer();
	void UpdateOverheatOnServer();
	void UserConstructionScript();

	void GetIconPlacement(const class AActor* SelfActor, const class AActor* ViewingActor, struct FVector* OutLocation, struct FVector* OutExtents) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MountedTurret_C">();
	}
	static class AMountedTurret_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMountedTurret_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(AMountedTurret_C) == 0x000010, "Wrong alignment on AMountedTurret_C");
static_assert(sizeof(AMountedTurret_C) == 0x001CB0, "Wrong size on AMountedTurret_C");
static_assert(offsetof(AMountedTurret_C, UberGraphFrame) == 0x001B40, "Member 'AMountedTurret_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, FortLinkToActorComp) == 0x001B48, "Member 'AMountedTurret_C::FortLinkToActorComp' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, AudioOverheat) == 0x001B50, "Member 'AMountedTurret_C::AudioOverheat' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, AudioOnOverheat) == 0x001B58, "Member 'AMountedTurret_C::AudioOnOverheat' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, ServoAudioComponent) == 0x001B60, "Member 'AMountedTurret_C::ServoAudioComponent' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, FortVehicleAimingWeaponComp) == 0x001B68, "Member 'AMountedTurret_C::FortVehicleAimingWeaponComp' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, PawnCollision) == 0x001B70, "Member 'AMountedTurret_C::PawnCollision' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, OverHeatScreen_R) == 0x001B78, "Member 'AMountedTurret_C::OverHeatScreen_R' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, OverHeatScreen_L) == 0x001B80, "Member 'AMountedTurret_C::OverHeatScreen_L' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, OverheatSmoke) == 0x001B88, "Member 'AMountedTurret_C::OverheatSmoke' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, MagazineGlowR) == 0x001B90, "Member 'AMountedTurret_C::MagazineGlowR' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, MagazineGlowL) == 0x001B98, "Member 'AMountedTurret_C::MagazineGlowL' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, BarrelGlowL) == 0x001BA0, "Member 'AMountedTurret_C::BarrelGlowL' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, BarrelGlowR) == 0x001BA8, "Member 'AMountedTurret_C::BarrelGlowR' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, OverlapVolume) == 0x001BB0, "Member 'AMountedTurret_C::OverlapVolume' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, OnDeathSound) == 0x001BB8, "Member 'AMountedTurret_C::OnDeathSound' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, GE_BlockWeaponFire) == 0x001BC0, "Member 'AMountedTurret_C::GE_BlockWeaponFire' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, GE_GrantWeapon) == 0x001BC8, "Member 'AMountedTurret_C::GE_GrantWeapon' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, DriverPawn) == 0x001BD0, "Member 'AMountedTurret_C::DriverPawn' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, GE_EnterTurret) == 0x001BD8, "Member 'AMountedTurret_C::GE_EnterTurret' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, PlayerEnterAnimation) == 0x001BE0, "Member 'AMountedTurret_C::PlayerEnterAnimation' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, TurretEnterAnimation) == 0x001BE8, "Member 'AMountedTurret_C::TurretEnterAnimation' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, PlayerFireAnimation) == 0x001BF0, "Member 'AMountedTurret_C::PlayerFireAnimation' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, PlayerWeapon) == 0x001BF8, "Member 'AMountedTurret_C::PlayerWeapon' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, TurretWeapon) == 0x001C00, "Member 'AMountedTurret_C::TurretWeapon' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, GetWeaponTimer) == 0x001C08, "Member 'AMountedTurret_C::GetWeaponTimer' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, OverheatCostmeticTimer) == 0x001C10, "Member 'AMountedTurret_C::OverheatCostmeticTimer' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, TurretFireLeftAnimation) == 0x001C18, "Member 'AMountedTurret_C::TurretFireLeftAnimation' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, TurretFireRightAnimation) == 0x001C20, "Member 'AMountedTurret_C::TurretFireRightAnimation' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, OverheatAudioCurve) == 0x001C28, "Member 'AMountedTurret_C::OverheatAudioCurve' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, TurretRotation) == 0x001C30, "Member 'AMountedTurret_C::TurretRotation' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, TurretStartAnimation) == 0x001C48, "Member 'AMountedTurret_C::TurretStartAnimation' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, TurretExitAnimation) == 0x001C50, "Member 'AMountedTurret_C::TurretExitAnimation' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, ZeroIfOverheating) == 0x001C58, "Member 'AMountedTurret_C::ZeroIfOverheating' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, bCanInteract) == 0x001C5C, "Member 'AMountedTurret_C::bCanInteract' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, fInteractionDelay) == 0x001C60, "Member 'AMountedTurret_C::fInteractionDelay' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, fInteractionDelayOffset) == 0x001C64, "Member 'AMountedTurret_C::fInteractionDelayOffset' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, Hide_HUD_Gameplay_Tags) == 0x001C68, "Member 'AMountedTurret_C::Hide_HUD_Gameplay_Tags' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, ReplicateOverheatOf20) == 0x001C78, "Member 'AMountedTurret_C::ReplicateOverheatOf20' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, OverheatOnServerTimer) == 0x001C80, "Member 'AMountedTurret_C::OverheatOnServerTimer' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, bStartMountedTurretAwake) == 0x001C88, "Member 'AMountedTurret_C::bStartMountedTurretAwake' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, DriverControllerGameplay) == 0x001C90, "Member 'AMountedTurret_C::DriverControllerGameplay' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, ServoSound) == 0x001C98, "Member 'AMountedTurret_C::ServoSound' has a wrong offset!");
static_assert(offsetof(AMountedTurret_C, bSkipOverheatBind) == 0x001CA0, "Member 'AMountedTurret_C::bSkipOverheatBind' has a wrong offset!");

}

