#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FNBR_Player_Prop

#include "Basic.hpp"

#include "GameplayTags_0_structs.hpp"
#include "Engine_structs.hpp"
#include "CreativePlayerPropOriginalMaterials_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass FNBR_Player_Prop.FNBR_Player_Prop_C
// 0x0288 (0x0C00 - 0x0978)
class AFNBR_Player_Prop_C : public ABuildingGameplayActorPlayerPropAttachment
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0978(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        Scene;                                             // 0x0980(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortMinigameLogicComponent*            FortMinigameLogic;                                 // 0x0988(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         TransitionToIntermediateTL_Lerp_167D07ED4B45099CF6BD6184C4B4C780; // 0x0990(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TransitionToIntermediateTL__Direction_167D07ED4B45099CF6BD6184C4B4C780; // 0x0994(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_995[0x3];                                      // 0x0995(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TransitionToIntermediateTL;                        // 0x0998(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WPOTransitionTL_Transition_55E65DA749A19F6D82D3C4BA0A7950CF; // 0x09A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            WPOTransitionTL__Direction_55E65DA749A19F6D82D3C4BA0A7950CF; // 0x09A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A5[0x3];                                      // 0x09A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     WPOTransitionTL;                                   // 0x09A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerPawn_Athena_C*                   PawnAttachedTo;                                    // 0x09B0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           PropDestroyedEventTag;                             // 0x09B8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldBeHiding;                                   // 0x09BC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9BD[0x3];                                      // 0x09BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           VisibilityRecheckTimerHandle;                      // 0x09C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         NewCapsuleRadius;                                  // 0x09C8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9CC[0x4];                                      // 0x09CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FinalScale;                                        // 0x09D0(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasScalingResetData;                              // 0x09E8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9E9[0x3];                                      // 0x09E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OldCapsuleRadius;                                  // 0x09EC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OldCapsuleHeight;                                  // 0x09F0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9F4[0x4];                                      // 0x09F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OldScale;                                          // 0x09F8(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScalePercent;                                      // 0x0A10(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleLerpTimeElapsed;                              // 0x0A14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleLerpInterval;                                 // 0x0A18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleLerpDuration;                                 // 0x0A1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleLerpAlpha;                                    // 0x0A20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A24[0x4];                                      // 0x0A24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ScaleLerpTimerHandle;                              // 0x0A28(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 ScaleLerpName;                                     // 0x0A30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bHasCleanedUp;                                     // 0x0A40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A41[0x3];                                      // 0x0A41(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentLoopTimeForHintSound;                       // 0x0A44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HintSoundTimer;                                    // 0x0A48(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             PropHintSoundFX;                                   // 0x0A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A58[0x8];                                      // 0x0A58(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PrePlacementRelativeTransform;                     // 0x0A60(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               PrePlacementRotation;                              // 0x0AC0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         CurrentMaxHealth;                                  // 0x0AD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ADC[0x4];                                      // 0x0ADC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             BackToPlayerSound;                                 // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Player_Eliminated_Sound;                           // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       PropMeshMIDs;                                      // 0x0AF0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsPlaced;                                          // 0x0B00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B01[0x7];                                      // 0x0B01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CopiedProp;                                        // 0x0B08(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           UICountdownTimerHandle;                            // 0x0B10(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         SoundTimeRemaining;                                // 0x0B18(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1C[0x4];                                      // 0x0B1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CountdownText;                                     // 0x0B20(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                BoundsExtent;                                      // 0x0B38(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinCapsuleRadius;                                  // 0x0B50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinCapsuleHalfHeight;                              // 0x0B54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           VerifyVisibilityTimer;                             // 0x0B58(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           InitScaleLerpTimerHandle;                          // 0x0B60(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         MaxCapsuleRadius;                                  // 0x0B68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxCapsuleHalfHeight;                              // 0x0B6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bScalePawnCapsuleWithPropSize;                     // 0x0B70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B71[0x7];                                      // 0x0B71(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           FinishScaleLerpTimerHandle;                        // 0x0B78(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             DefaultPawnMeshCollisionEnabled;                   // 0x0B80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B81[0x7];                                      // 0x0B81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_SetMaxHealthClass;                              // 0x0B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            GE_SetMaxHealthActive;                             // 0x0B90(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bDidPawnRelatedInitialization;                     // 0x0B98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B99[0x7];                                      // 0x0B99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       IntermediateMIDs;                                  // 0x0BA0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FCreativePlayerPropOriginalMaterials> StaticMeshOriginalMaterials;                       // 0x0BB0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<TSoftObjectPtr<class UMaterial>>       NonOpaqueMaterialsToRender;                        // 0x0BC0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bUseSilentDie;                                     // 0x0BD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BD1[0x7];                                      // 0x0BD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  GameplayTagToDisableGravyGoblin;                   // 0x0BD8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         BlackListAttempts;                                 // 0x0BF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void WPOTransitionTL__UpdateFunc();
	void WPOTransitionTL__FinishedFunc();
	void VerifyPropVisibility();
	void UpdateVisibility();
	void UI_Countdown_Timer_Event();
	void TransitionVFX(ETimelineDirection Direction);
	void TransitionToIntermediateTL__UpdateFunc();
	void TransitionToIntermediateTL__FinishedFunc();
	void Terminate();
	void SyncToHintTimer();
	void StartHidingHintSound();
	void SetupTimer(float Time_Remaining);
	void SetScale(const struct FVector& NewScale);
	void SetPropPlaced(bool NewPlaced, float PlacedYawOffset);
	void SetProp(class AActor* SelectedProp, class APlayerPawn_Athena_C* PlayerPawnToAttachTo, float ScaleDuration);
	void SetMaxHealth(float NewMaxHealth);
	void SetCapsuleRadius();
	void ServerTimerReset();
	void ServerSetPlaced(bool NewPlaced, float PlacedYawOffset);
	void ScaleLerp();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void PlayHintSound();
	void Play_Prop_Removed_Sound();
	void OnRep_SoundTimeRemaining();
	void OnRep_ScalePercent();
	void OnRep_PawnAttachedTo();
	void OnRep_NewCapsuleRadius();
	void OnRep_FinalScale();
	void OnRep_CopiedProp();
	void OnRep_bShouldBeHiding();
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void MulticastSetStaticMesh(class APlayerPawn_Athena_C* PlayerPawnToAttachTo, float ScaleDuration, const struct FVector& BoundsExtent_0);
	void InitScaleLerp();
	void InitializeMIDs();
	void GetRelativePropSizeForHintSoundTiming(float PropVolume, int32* RelativeSize);
	void GetRelativePropSizeForHealthScaling(float PropVolume, int32* RelativeSize);
	void GetPropHuntSettings(class ABP_PropPossessorConfigProp_C** Settings, bool* Exists);
	void FinishScaleLerp();
	void FinishPropSetup();
	void ExecuteUbergraph_FNBR_Player_Prop(int32 EntryPoint);
	void End_Prop_Possession();
	void DoPawnRelatedInitialization();
	void CalculatePropVolume(float* MeshVolume);
	void BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_3_SimpleDynamicMulticastDelegate__DelegateSignature();
	void BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_2_SimpleDynamicMulticastDelegate__DelegateSignature();
	void AddPropsToItemsSpecificBlackList();
	void AddItemSpecificBlacklistTagToProp();

	void CalcPropOffset(struct FVector* PropOffset) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FNBR_Player_Prop_C">();
	}
	static class AFNBR_Player_Prop_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFNBR_Player_Prop_C>();
	}
};
static_assert(alignof(AFNBR_Player_Prop_C) == 0x000010, "Wrong alignment on AFNBR_Player_Prop_C");
static_assert(sizeof(AFNBR_Player_Prop_C) == 0x000C00, "Wrong size on AFNBR_Player_Prop_C");
static_assert(offsetof(AFNBR_Player_Prop_C, UberGraphFrame) == 0x000978, "Member 'AFNBR_Player_Prop_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, Scene) == 0x000980, "Member 'AFNBR_Player_Prop_C::Scene' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, FortMinigameLogic) == 0x000988, "Member 'AFNBR_Player_Prop_C::FortMinigameLogic' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, TransitionToIntermediateTL_Lerp_167D07ED4B45099CF6BD6184C4B4C780) == 0x000990, "Member 'AFNBR_Player_Prop_C::TransitionToIntermediateTL_Lerp_167D07ED4B45099CF6BD6184C4B4C780' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, TransitionToIntermediateTL__Direction_167D07ED4B45099CF6BD6184C4B4C780) == 0x000994, "Member 'AFNBR_Player_Prop_C::TransitionToIntermediateTL__Direction_167D07ED4B45099CF6BD6184C4B4C780' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, TransitionToIntermediateTL) == 0x000998, "Member 'AFNBR_Player_Prop_C::TransitionToIntermediateTL' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, WPOTransitionTL_Transition_55E65DA749A19F6D82D3C4BA0A7950CF) == 0x0009A0, "Member 'AFNBR_Player_Prop_C::WPOTransitionTL_Transition_55E65DA749A19F6D82D3C4BA0A7950CF' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, WPOTransitionTL__Direction_55E65DA749A19F6D82D3C4BA0A7950CF) == 0x0009A4, "Member 'AFNBR_Player_Prop_C::WPOTransitionTL__Direction_55E65DA749A19F6D82D3C4BA0A7950CF' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, WPOTransitionTL) == 0x0009A8, "Member 'AFNBR_Player_Prop_C::WPOTransitionTL' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, PawnAttachedTo) == 0x0009B0, "Member 'AFNBR_Player_Prop_C::PawnAttachedTo' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, PropDestroyedEventTag) == 0x0009B8, "Member 'AFNBR_Player_Prop_C::PropDestroyedEventTag' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, bShouldBeHiding) == 0x0009BC, "Member 'AFNBR_Player_Prop_C::bShouldBeHiding' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, VisibilityRecheckTimerHandle) == 0x0009C0, "Member 'AFNBR_Player_Prop_C::VisibilityRecheckTimerHandle' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, NewCapsuleRadius) == 0x0009C8, "Member 'AFNBR_Player_Prop_C::NewCapsuleRadius' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, FinalScale) == 0x0009D0, "Member 'AFNBR_Player_Prop_C::FinalScale' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, bHasScalingResetData) == 0x0009E8, "Member 'AFNBR_Player_Prop_C::bHasScalingResetData' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, OldCapsuleRadius) == 0x0009EC, "Member 'AFNBR_Player_Prop_C::OldCapsuleRadius' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, OldCapsuleHeight) == 0x0009F0, "Member 'AFNBR_Player_Prop_C::OldCapsuleHeight' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, OldScale) == 0x0009F8, "Member 'AFNBR_Player_Prop_C::OldScale' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, ScalePercent) == 0x000A10, "Member 'AFNBR_Player_Prop_C::ScalePercent' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, ScaleLerpTimeElapsed) == 0x000A14, "Member 'AFNBR_Player_Prop_C::ScaleLerpTimeElapsed' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, ScaleLerpInterval) == 0x000A18, "Member 'AFNBR_Player_Prop_C::ScaleLerpInterval' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, ScaleLerpDuration) == 0x000A1C, "Member 'AFNBR_Player_Prop_C::ScaleLerpDuration' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, ScaleLerpAlpha) == 0x000A20, "Member 'AFNBR_Player_Prop_C::ScaleLerpAlpha' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, ScaleLerpTimerHandle) == 0x000A28, "Member 'AFNBR_Player_Prop_C::ScaleLerpTimerHandle' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, ScaleLerpName) == 0x000A30, "Member 'AFNBR_Player_Prop_C::ScaleLerpName' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, bHasCleanedUp) == 0x000A40, "Member 'AFNBR_Player_Prop_C::bHasCleanedUp' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, CurrentLoopTimeForHintSound) == 0x000A44, "Member 'AFNBR_Player_Prop_C::CurrentLoopTimeForHintSound' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, HintSoundTimer) == 0x000A48, "Member 'AFNBR_Player_Prop_C::HintSoundTimer' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, PropHintSoundFX) == 0x000A50, "Member 'AFNBR_Player_Prop_C::PropHintSoundFX' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, PrePlacementRelativeTransform) == 0x000A60, "Member 'AFNBR_Player_Prop_C::PrePlacementRelativeTransform' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, PrePlacementRotation) == 0x000AC0, "Member 'AFNBR_Player_Prop_C::PrePlacementRotation' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, CurrentMaxHealth) == 0x000AD8, "Member 'AFNBR_Player_Prop_C::CurrentMaxHealth' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, BackToPlayerSound) == 0x000AE0, "Member 'AFNBR_Player_Prop_C::BackToPlayerSound' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, Player_Eliminated_Sound) == 0x000AE8, "Member 'AFNBR_Player_Prop_C::Player_Eliminated_Sound' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, PropMeshMIDs) == 0x000AF0, "Member 'AFNBR_Player_Prop_C::PropMeshMIDs' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, IsPlaced) == 0x000B00, "Member 'AFNBR_Player_Prop_C::IsPlaced' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, CopiedProp) == 0x000B08, "Member 'AFNBR_Player_Prop_C::CopiedProp' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, UICountdownTimerHandle) == 0x000B10, "Member 'AFNBR_Player_Prop_C::UICountdownTimerHandle' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, SoundTimeRemaining) == 0x000B18, "Member 'AFNBR_Player_Prop_C::SoundTimeRemaining' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, CountdownText) == 0x000B20, "Member 'AFNBR_Player_Prop_C::CountdownText' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, BoundsExtent) == 0x000B38, "Member 'AFNBR_Player_Prop_C::BoundsExtent' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, MinCapsuleRadius) == 0x000B50, "Member 'AFNBR_Player_Prop_C::MinCapsuleRadius' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, MinCapsuleHalfHeight) == 0x000B54, "Member 'AFNBR_Player_Prop_C::MinCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, VerifyVisibilityTimer) == 0x000B58, "Member 'AFNBR_Player_Prop_C::VerifyVisibilityTimer' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, InitScaleLerpTimerHandle) == 0x000B60, "Member 'AFNBR_Player_Prop_C::InitScaleLerpTimerHandle' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, MaxCapsuleRadius) == 0x000B68, "Member 'AFNBR_Player_Prop_C::MaxCapsuleRadius' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, MaxCapsuleHalfHeight) == 0x000B6C, "Member 'AFNBR_Player_Prop_C::MaxCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, bScalePawnCapsuleWithPropSize) == 0x000B70, "Member 'AFNBR_Player_Prop_C::bScalePawnCapsuleWithPropSize' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, FinishScaleLerpTimerHandle) == 0x000B78, "Member 'AFNBR_Player_Prop_C::FinishScaleLerpTimerHandle' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, DefaultPawnMeshCollisionEnabled) == 0x000B80, "Member 'AFNBR_Player_Prop_C::DefaultPawnMeshCollisionEnabled' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, GE_SetMaxHealthClass) == 0x000B88, "Member 'AFNBR_Player_Prop_C::GE_SetMaxHealthClass' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, GE_SetMaxHealthActive) == 0x000B90, "Member 'AFNBR_Player_Prop_C::GE_SetMaxHealthActive' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, bDidPawnRelatedInitialization) == 0x000B98, "Member 'AFNBR_Player_Prop_C::bDidPawnRelatedInitialization' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, IntermediateMIDs) == 0x000BA0, "Member 'AFNBR_Player_Prop_C::IntermediateMIDs' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, StaticMeshOriginalMaterials) == 0x000BB0, "Member 'AFNBR_Player_Prop_C::StaticMeshOriginalMaterials' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, NonOpaqueMaterialsToRender) == 0x000BC0, "Member 'AFNBR_Player_Prop_C::NonOpaqueMaterialsToRender' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, bUseSilentDie) == 0x000BD0, "Member 'AFNBR_Player_Prop_C::bUseSilentDie' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, GameplayTagToDisableGravyGoblin) == 0x000BD8, "Member 'AFNBR_Player_Prop_C::GameplayTagToDisableGravyGoblin' has a wrong offset!");
static_assert(offsetof(AFNBR_Player_Prop_C, BlackListAttempts) == 0x000BF8, "Member 'AFNBR_Player_Prop_C::BlackListAttempts' has a wrong offset!");

}

