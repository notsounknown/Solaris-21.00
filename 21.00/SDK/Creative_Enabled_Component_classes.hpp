#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Creative_Enabled_Component

#include "Basic.hpp"

#include "EEnabledOnPhase_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "EEnabledState_structs.hpp"
#include "Creative_EnabledState_structs.hpp"
#include "Creative_DeviceComponent_Parent_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Creative_Enabled_Component.Creative_Enabled_Component_C
// 0x00B0 (0x0158 - 0x00A8)
class UCreative_Enabled_Component_C final : public UCreative_DeviceComponent_Parent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Creative_Enabled_Component_C;       // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FCreative_EnabledState                 EnabledState;                                      // 0x00B0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(bool Enabled)>  On_Enabled_State_Changed;                          // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          EnabledDuringPlayMode;                             // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnabledDuringEditMode;                             // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              On_Reset_Complete;                                 // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           Reset_Timer;                                       // 0x00E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSet<EFortMinigameState>                      IgnorePhases;                                      // 0x00E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ResetDelay;                                        // 0x0138(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Enabled_Index;                                     // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_be_Enabled_During_Edit_Mode;                   // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMinigameLogicComponent*            Logic_Component;                                   // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Switch_On_Phase_Change;                            // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Switch_On_Play_Change;                             // 0x0151(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBeEnabledDuringPreview;                         // 0x0152(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Check_Phase_Change_During_Play_Switch;             // 0x0153(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Show_Debug;                                        // 0x0154(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Set_Enabled_on_Play_Mode(bool Play_Mode);
	void Set_Enabled_on_Phase(EFortMinigameState State, int32 EnabledIndex);
	void Set_Enabled(bool bEnabled);
	void Reset_Delay_Start(float Delay);
	void Reset_Delay_Complete();
	void OnRep_EIsEnabled();
	void Minigame_State_Changed(class AFortMinigame* Minigame, EFortMinigameState MinigameState);
	void Minigame_Play_Mode_Changed(class AFortMinigame* Minigame, bool bIsInPlayMode);
	void IsResetting(bool* TRUE_0, float* Remaining_Time);
	void IsEnabled(bool* Enabled);
	void Initialize_Component(class UFortMinigameLogicComponent* Logic_Component_0, int32 Enabled_Index_0);
	void Initialize(class UFortMinigameLogicComponent* Logic_Component_0, EEnabledOnPhase Enabled_Phases);
	void ExecuteUbergraph_Creative_Enabled_Component(int32 EntryPoint);
	void Can_be_Enabled(bool* TRUE_0);
	void Bind_to_Minigame(class AFortMinigame* Minigame);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Creative_Enabled_Component_C">();
	}
	static class UCreative_Enabled_Component_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCreative_Enabled_Component_C>();
	}
};
static_assert(alignof(UCreative_Enabled_Component_C) == 0x000008, "Wrong alignment on UCreative_Enabled_Component_C");
static_assert(sizeof(UCreative_Enabled_Component_C) == 0x000158, "Wrong size on UCreative_Enabled_Component_C");
static_assert(offsetof(UCreative_Enabled_Component_C, UberGraphFrame_Creative_Enabled_Component_C) == 0x0000A8, "Member 'UCreative_Enabled_Component_C::UberGraphFrame_Creative_Enabled_Component_C' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, EnabledState) == 0x0000B0, "Member 'UCreative_Enabled_Component_C::EnabledState' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, On_Enabled_State_Changed) == 0x0000B8, "Member 'UCreative_Enabled_Component_C::On_Enabled_State_Changed' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, EnabledDuringPlayMode) == 0x0000C8, "Member 'UCreative_Enabled_Component_C::EnabledDuringPlayMode' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, EnabledDuringEditMode) == 0x0000C9, "Member 'UCreative_Enabled_Component_C::EnabledDuringEditMode' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, On_Reset_Complete) == 0x0000D0, "Member 'UCreative_Enabled_Component_C::On_Reset_Complete' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, Reset_Timer) == 0x0000E0, "Member 'UCreative_Enabled_Component_C::Reset_Timer' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, IgnorePhases) == 0x0000E8, "Member 'UCreative_Enabled_Component_C::IgnorePhases' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, ResetDelay) == 0x000138, "Member 'UCreative_Enabled_Component_C::ResetDelay' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, Enabled_Index) == 0x00013C, "Member 'UCreative_Enabled_Component_C::Enabled_Index' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, Can_be_Enabled_During_Edit_Mode) == 0x000140, "Member 'UCreative_Enabled_Component_C::Can_be_Enabled_During_Edit_Mode' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, Logic_Component) == 0x000148, "Member 'UCreative_Enabled_Component_C::Logic_Component' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, Switch_On_Phase_Change) == 0x000150, "Member 'UCreative_Enabled_Component_C::Switch_On_Phase_Change' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, Switch_On_Play_Change) == 0x000151, "Member 'UCreative_Enabled_Component_C::Switch_On_Play_Change' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, CanBeEnabledDuringPreview) == 0x000152, "Member 'UCreative_Enabled_Component_C::CanBeEnabledDuringPreview' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, Check_Phase_Change_During_Play_Switch) == 0x000153, "Member 'UCreative_Enabled_Component_C::Check_Phase_Change_During_Play_Switch' has a wrong offset!");
static_assert(offsetof(UCreative_Enabled_Component_C, Show_Debug) == 0x000154, "Member 'UCreative_Enabled_Component_C::Show_Debug' has a wrong offset!");

}

