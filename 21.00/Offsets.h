// Generated by Sarah's Offset Finder
// Fortnite version: 21.00

#pragma once
#include <stdint.h>
#include <stdexcept>
#include <vector>
#include <intrin.h>

class Sarah
{
public:
	class Offsets
	{
	public:
		static inline uint64_t ImageBase;
		static inline uint64_t Step;
		static inline uint64_t StepExplicitProperty;
		static inline uint64_t ReadyToStartMatch;
		static inline uint64_t SpawnDefaultPawnFor;
		static inline uint64_t ServerAcknowledgePossession;
		static inline uint64_t HandleStartingNewPlayer;
		static inline uint64_t ServerExecuteInventoryItem;
		static inline uint64_t ServerAttemptAircraftJump;
		static inline uint64_t CreateNetDriver;
		static inline uint64_t InitHost;
		static inline uint64_t PauseBeaconRequests;
		static inline uint64_t InitListen;
		static inline uint64_t SetWorld;
		static inline uint64_t WorldNetMode;
		static inline uint64_t GIsClient;
		static inline uint64_t TickFlush;
		static inline uint64_t GetMaxTickRate;
		static inline uint64_t DispatchRequest;
		static inline uint64_t StaticFindObject;
		static inline uint64_t StaticLoadObject;
		static inline uint64_t ApplyCharacterCustomization;
		static inline uint64_t InternalTryActivateAbility;
		static inline uint64_t InternalServerTryActivateAbility;
		static inline uint64_t ServerReplicateActors;
		static inline uint64_t Realloc;
		static inline uint64_t ConstructAbilitySpec;
		static inline uint64_t InternalGiveAbility;
		static inline uint64_t StartNewSafeZonePhase;
		static inline uint64_t PickTeam;
		static inline uint32_t ReadyToStartMatchVft;
		static inline uint32_t SpawnDefaultPawnForVft;
		static inline uint32_t ServerAcknowledgePossessionVft;
		static inline uint32_t HandleStartingNewPlayerVft;
		static inline uint32_t ServerExecuteInventoryItemVft;
		static inline uint32_t ServerAttemptAircraftJumpVft;
		static inline uint32_t InternalServerTryActivateAbilityVft;
		static inline uint64_t GameSessionPatch;
		static inline uint64_t EncryptionPatch;
		static inline uint64_t FNameConstructor;
		static inline uint64_t ToString;
		static inline uint64_t FMsgLogf;
		static inline uint64_t GetRuntimeNodeFromGUID;
		static inline uint64_t CheckRequirements;
		static inline uint64_t GetConversationRegistryFromWorld;
		static inline uint64_t BuildDependenciesGraph;
		static inline uint64_t GetConversationFromNodeGUID;

		static inline std::vector<uint64_t> NullFuncs;

		static inline std::vector<uint64_t> RetTrueFuncs;

		static int Init()
		{
			ImageBase = *(uint64_t*)(__readgsqword(0x60) + 0x10);
			Step = ImageBase + 0xdc8ea0;
			StepExplicitProperty = ImageBase + 0x10455c8;
			ReadyToStartMatch = ImageBase + 0x6a744d4;
			SpawnDefaultPawnFor = ImageBase + 0x6a79a84;
			ServerAcknowledgePossession = ImageBase + 0xda97f0;
			HandleStartingNewPlayer = ImageBase + 0x6e96c58;
			ServerExecuteInventoryItem = ImageBase + 0xda97f0;
			ServerAttemptAircraftJump = ImageBase + 0xda97f0;
			CreateNetDriver = ImageBase + 0x174225c;
			InitHost = ImageBase + 0x5cc07fc;
			PauseBeaconRequests = ImageBase + 0x70ac018;
			InitListen = ImageBase + 0x5cc0b74;
			SetWorld = ImageBase + 0x173fd18;
			WorldNetMode = ImageBase + 0x10bc8f4;
			GIsClient = ImageBase + 0xc9dad51;
			TickFlush = ImageBase + 0xe1fd78;
			GetMaxTickRate = ImageBase + 0x10e379c;
			DispatchRequest = ImageBase + 0x185e964;
			StaticFindObject = ImageBase + 0x104043c;
			StaticLoadObject = ImageBase + 0x1564448;
			ApplyCharacterCustomization = ImageBase + 0x7255cbc;
			InternalTryActivateAbility = ImageBase + 0x586c65c;
			InternalServerTryActivateAbility = ImageBase + 0xda97f0;
			ServerReplicateActors = ImageBase + 0x1209a70;
			Realloc = ImageBase + 0x1d19e30;
			ConstructAbilitySpec = ImageBase + 0x58626dc;
			InternalGiveAbility = ImageBase + 0x586b338;
			StartNewSafeZonePhase = ImageBase + 0x6a7e1a4;
			PickTeam = ImageBase + 0x6a732a8;
			ReadyToStartMatchVft = 0x119;
			SpawnDefaultPawnForVft = 0xdc;
			ServerAcknowledgePossessionVft = 0x126;
			HandleStartingNewPlayerVft = 0xe2;
			ServerExecuteInventoryItemVft = 0x232;
			ServerAttemptAircraftJumpVft = 0xa0;
			InternalServerTryActivateAbilityVft = 0x10c;
			GameSessionPatch = ImageBase + 0xf1cda6;
			EncryptionPatch = ImageBase + 0x892d66b;
			FNameConstructor = ImageBase + 0xe20f40;
			ToString = ImageBase + 0xe2b400;
			FMsgLogf = ImageBase + 0xe14304;
			GetRuntimeNodeFromGUID = ImageBase + 0x5ae5e8c;
			CheckRequirements = ImageBase + 0x5ae4fac;
			GetConversationRegistryFromWorld = ImageBase + 0x57f5d2c;
			BuildDependenciesGraph = ImageBase + 0xe4848c;
			GetConversationFromNodeGUID = ImageBase + 0x5ae5b9c;


			NullFuncs.push_back(ImageBase + 0x1163e7c);
			NullFuncs.push_back(ImageBase + 0x11dab5c);
			NullFuncs.push_back(ImageBase + 0x10dc1dc);
			NullFuncs.push_back(ImageBase + 0x10db574);
			NullFuncs.push_back(ImageBase + 0x47d3500);
			NullFuncs.push_back(ImageBase + 0x186bf54);
			NullFuncs.push_back(ImageBase + 0x8682d6c);
			NullFuncs.push_back(ImageBase + 0x4cff310);
			NullFuncs.push_back(ImageBase + 0x221a404);
			NullFuncs.push_back(ImageBase + 0x175ee70);
			NullFuncs.push_back(ImageBase + 0x175f414);
			RetTrueFuncs.push_back(ImageBase + 0x1b0d278);

			return 0;
		}
	};
};
#define InitOffsets auto _offsetInitter = Sarah::Offsets::Init();