#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Athena_TacShield

#include "Basic.hpp"

#include "GameplayTags_0_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Athena_TacShield.GA_Athena_TacShield_C
// 0x02A8 (0x0DB8 - 0x0B10)
class UGA_Athena_TacShield_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B10(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FScalableFloat                         Row_Enabled;                                       // 0x0B18(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_TacticalOvershieldRegenDelay;                  // 0x0B40(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_TacticalOvershieldRegenCapPercentage;          // 0x0B68(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_RegenStartsOnDBNORevive;                       // 0x0B90(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_MaxTacticalOvershield;                         // 0x0BB8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_BusDropRegenDelay;                             // 0x0BE0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FActiveGameplayEffectHandle            GE_Overshield_Regen;                               // 0x0C08(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_ShieldRegen;                                    // 0x0C10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Application;                                    // 0x0C18(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_TacOvershieldBreak;                             // 0x0C1C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Bool_ForceRechargeOnAircraftExit;                  // 0x0C20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C21[0x7];                                      // 0x0C21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        PawnToCheck;                                       // 0x0C28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShieldCheckInterval;                               // 0x0C30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C34[0x4];                                      // 0x0C34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_ReapplyBlockingTags;                            // 0x0C38(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_DBNOReviveMinDelay;                            // 0x0C58(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           Timer_RegenDelay;                                  // 0x0C80(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TC_ApplicationRequiredTags;                        // 0x0C88(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_ApplicationIgnoreTags;                          // 0x0CA8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           GC_NormalShieldBreak;                              // 0x0CC8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_ShieldFull;                                     // 0x0CCC(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Bool_HasPendingOvershieldBreak;                    // 0x0CD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CD1[0x7];                                      // 0x0CD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 PendingOvershieldBreaker;                          // 0x0CD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OldIsEnabled;                                      // 0x0CE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CE1[0x7];                                      // 0x0CE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           OvershieldBreakTimerHandle;                        // 0x0CE8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TC_FallDamageTags;                                 // 0x0CF0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_StormDamageTags;                                // 0x0D10(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_IgnoreFallDamageForRegen;                      // 0x0D30(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_IgnoreStormDamageForRegen;                     // 0x0D58(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAbilityTask*>                   ActiveSubTasks;                                    // 0x0D80(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_TacticalOvershieldRegenAmount;                 // 0x0D90(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void Added_52DA3C8B4E9469B4CD5390ABA25AC382();
	void Apply_Delayed_Regen();
	void ApplyRegenNoDelay();
	void AttemptRegenEffectRemoval();
	void CheckMaxOverShield();
	void ClearAircraftBinds();
	void ExecuteUbergraph_GA_Athena_TacShield(int32 EntryPoint);
	void FailedToActivatePassiveAbility();
	void GetAircraftComponent(class APawn* TargetPawn, class UFortControllerComponent_Aircraft** AircraftComponent, bool* TargetPawnOrControllerIsValid);
	void GetValidPawn(class AFortPlayerPawn** PawnToCheck_0, bool* PassedPawnCast);
	void HandleAircraftStateChange();
	void HandleNormalShieldBreak(class AActor* EffectCauser);
	void HandleOvershieldBreak(class AActor* EffectCauser);
	void IsOvershieldFull(class AFortPawn* OptionalPawnIn, bool* OvershieldFull);
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void OnAnyShieldDamage();
	void OnCurrentOvershieldChange();
	void OnDamageReceived(const struct FGameplayEventData& EventData);
	void OnMutatorListUpdated();
	void OnOvershieldBreak(class AActor* Instigator);
	void OnShieldBreak(class AActor* Instigator);
	void Removed_0E7B2CBC44BC75F6C8BFDEB429622EEF();
	void SendOvershieldBreakCue();
	void SetupAircraftBinds();
	void SetupDBNOBinds();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Athena_TacShield_C">();
	}
	static class UGA_Athena_TacShield_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Athena_TacShield_C>();
	}
};
static_assert(alignof(UGA_Athena_TacShield_C) == 0x000008, "Wrong alignment on UGA_Athena_TacShield_C");
static_assert(sizeof(UGA_Athena_TacShield_C) == 0x000DB8, "Wrong size on UGA_Athena_TacShield_C");
static_assert(offsetof(UGA_Athena_TacShield_C, UberGraphFrame) == 0x000B10, "Member 'UGA_Athena_TacShield_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, Row_Enabled) == 0x000B18, "Member 'UGA_Athena_TacShield_C::Row_Enabled' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, Row_TacticalOvershieldRegenDelay) == 0x000B40, "Member 'UGA_Athena_TacShield_C::Row_TacticalOvershieldRegenDelay' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, Row_TacticalOvershieldRegenCapPercentage) == 0x000B68, "Member 'UGA_Athena_TacShield_C::Row_TacticalOvershieldRegenCapPercentage' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, Row_RegenStartsOnDBNORevive) == 0x000B90, "Member 'UGA_Athena_TacShield_C::Row_RegenStartsOnDBNORevive' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, Row_MaxTacticalOvershield) == 0x000BB8, "Member 'UGA_Athena_TacShield_C::Row_MaxTacticalOvershield' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, Row_BusDropRegenDelay) == 0x000BE0, "Member 'UGA_Athena_TacShield_C::Row_BusDropRegenDelay' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, GE_Overshield_Regen) == 0x000C08, "Member 'UGA_Athena_TacShield_C::GE_Overshield_Regen' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, GE_ShieldRegen) == 0x000C10, "Member 'UGA_Athena_TacShield_C::GE_ShieldRegen' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, GC_Application) == 0x000C18, "Member 'UGA_Athena_TacShield_C::GC_Application' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, GC_TacOvershieldBreak) == 0x000C1C, "Member 'UGA_Athena_TacShield_C::GC_TacOvershieldBreak' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, Bool_ForceRechargeOnAircraftExit) == 0x000C20, "Member 'UGA_Athena_TacShield_C::Bool_ForceRechargeOnAircraftExit' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, PawnToCheck) == 0x000C28, "Member 'UGA_Athena_TacShield_C::PawnToCheck' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, ShieldCheckInterval) == 0x000C30, "Member 'UGA_Athena_TacShield_C::ShieldCheckInterval' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, TC_ReapplyBlockingTags) == 0x000C38, "Member 'UGA_Athena_TacShield_C::TC_ReapplyBlockingTags' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, Row_DBNOReviveMinDelay) == 0x000C58, "Member 'UGA_Athena_TacShield_C::Row_DBNOReviveMinDelay' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, Timer_RegenDelay) == 0x000C80, "Member 'UGA_Athena_TacShield_C::Timer_RegenDelay' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, TC_ApplicationRequiredTags) == 0x000C88, "Member 'UGA_Athena_TacShield_C::TC_ApplicationRequiredTags' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, TC_ApplicationIgnoreTags) == 0x000CA8, "Member 'UGA_Athena_TacShield_C::TC_ApplicationIgnoreTags' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, GC_NormalShieldBreak) == 0x000CC8, "Member 'UGA_Athena_TacShield_C::GC_NormalShieldBreak' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, GC_ShieldFull) == 0x000CCC, "Member 'UGA_Athena_TacShield_C::GC_ShieldFull' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, Bool_HasPendingOvershieldBreak) == 0x000CD0, "Member 'UGA_Athena_TacShield_C::Bool_HasPendingOvershieldBreak' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, PendingOvershieldBreaker) == 0x000CD8, "Member 'UGA_Athena_TacShield_C::PendingOvershieldBreaker' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, OldIsEnabled) == 0x000CE0, "Member 'UGA_Athena_TacShield_C::OldIsEnabled' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, OvershieldBreakTimerHandle) == 0x000CE8, "Member 'UGA_Athena_TacShield_C::OvershieldBreakTimerHandle' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, TC_FallDamageTags) == 0x000CF0, "Member 'UGA_Athena_TacShield_C::TC_FallDamageTags' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, TC_StormDamageTags) == 0x000D10, "Member 'UGA_Athena_TacShield_C::TC_StormDamageTags' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, Row_IgnoreFallDamageForRegen) == 0x000D30, "Member 'UGA_Athena_TacShield_C::Row_IgnoreFallDamageForRegen' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, Row_IgnoreStormDamageForRegen) == 0x000D58, "Member 'UGA_Athena_TacShield_C::Row_IgnoreStormDamageForRegen' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, ActiveSubTasks) == 0x000D80, "Member 'UGA_Athena_TacShield_C::ActiveSubTasks' has a wrong offset!");
static_assert(offsetof(UGA_Athena_TacShield_C, Row_TacticalOvershieldRegenAmount) == 0x000D90, "Member 'UGA_Athena_TacShield_C::Row_TacticalOvershieldRegenAmount' has a wrong offset!");

}

