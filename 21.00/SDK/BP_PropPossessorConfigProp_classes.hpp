#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PropPossessorConfigProp

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "ItemDropBehavior_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PropPossessorConfigProp.BP_PropPossessorConfigProp_C
// 0x0050 (0x0EC0 - 0x0E70)
class ABP_PropPossessorConfigProp_C final : public ABuildingProp
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0E70(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCreative_VisibleInGame_Component_C*    VisibilityRulesComponent;                          // 0x0E78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortMinigameProgressComponent*         FortMinigameProgress;                              // 0x0E80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0E88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UToyOptionsComponent_C*                 ToyOptionsComponent;                               // 0x0E90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         ShowPropsRemaining;                                // 0x0E98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PingFrequency;                                     // 0x0E9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AllowCancelPropPossession;                         // 0x0EA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AllowChangePossessedProp;                          // 0x0EA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PropHealthSetting;                                 // 0x0EA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DropPropGunBehavior;                               // 0x0EAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortItemDefinition*                    PropPossessorItemDef;                              // 0x0EB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowPingTimer;                                     // 0x0EB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EB9[0x3];                                      // 0x0EB9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EquipPrimaryItemAfterCancelPropPossession;         // 0x0EBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SetMinigameDropRule(class AMinigame_PlayerCreated_C* Minigame);
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BP_PropPossessorConfigProp(int32 EntryPoint);
	void BndEvt__FortMinigameProgress_K2Node_ComponentBoundEvent_4_SimpleDynamicMulticastDelegate__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PropPossessorConfigProp_C">();
	}
	static class ABP_PropPossessorConfigProp_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PropPossessorConfigProp_C>();
	}
};
static_assert(alignof(ABP_PropPossessorConfigProp_C) == 0x000008, "Wrong alignment on ABP_PropPossessorConfigProp_C");
static_assert(sizeof(ABP_PropPossessorConfigProp_C) == 0x000EC0, "Wrong size on ABP_PropPossessorConfigProp_C");
static_assert(offsetof(ABP_PropPossessorConfigProp_C, UberGraphFrame) == 0x000E70, "Member 'ABP_PropPossessorConfigProp_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PropPossessorConfigProp_C, VisibilityRulesComponent) == 0x000E78, "Member 'ABP_PropPossessorConfigProp_C::VisibilityRulesComponent' has a wrong offset!");
static_assert(offsetof(ABP_PropPossessorConfigProp_C, FortMinigameProgress) == 0x000E80, "Member 'ABP_PropPossessorConfigProp_C::FortMinigameProgress' has a wrong offset!");
static_assert(offsetof(ABP_PropPossessorConfigProp_C, SkeletalMesh) == 0x000E88, "Member 'ABP_PropPossessorConfigProp_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_PropPossessorConfigProp_C, ToyOptionsComponent) == 0x000E90, "Member 'ABP_PropPossessorConfigProp_C::ToyOptionsComponent' has a wrong offset!");
static_assert(offsetof(ABP_PropPossessorConfigProp_C, ShowPropsRemaining) == 0x000E98, "Member 'ABP_PropPossessorConfigProp_C::ShowPropsRemaining' has a wrong offset!");
static_assert(offsetof(ABP_PropPossessorConfigProp_C, PingFrequency) == 0x000E9C, "Member 'ABP_PropPossessorConfigProp_C::PingFrequency' has a wrong offset!");
static_assert(offsetof(ABP_PropPossessorConfigProp_C, AllowCancelPropPossession) == 0x000EA0, "Member 'ABP_PropPossessorConfigProp_C::AllowCancelPropPossession' has a wrong offset!");
static_assert(offsetof(ABP_PropPossessorConfigProp_C, AllowChangePossessedProp) == 0x000EA4, "Member 'ABP_PropPossessorConfigProp_C::AllowChangePossessedProp' has a wrong offset!");
static_assert(offsetof(ABP_PropPossessorConfigProp_C, PropHealthSetting) == 0x000EA8, "Member 'ABP_PropPossessorConfigProp_C::PropHealthSetting' has a wrong offset!");
static_assert(offsetof(ABP_PropPossessorConfigProp_C, DropPropGunBehavior) == 0x000EAC, "Member 'ABP_PropPossessorConfigProp_C::DropPropGunBehavior' has a wrong offset!");
static_assert(offsetof(ABP_PropPossessorConfigProp_C, PropPossessorItemDef) == 0x000EB0, "Member 'ABP_PropPossessorConfigProp_C::PropPossessorItemDef' has a wrong offset!");
static_assert(offsetof(ABP_PropPossessorConfigProp_C, ShowPingTimer) == 0x000EB8, "Member 'ABP_PropPossessorConfigProp_C::ShowPingTimer' has a wrong offset!");
static_assert(offsetof(ABP_PropPossessorConfigProp_C, EquipPrimaryItemAfterCancelPropPossession) == 0x000EBC, "Member 'ABP_PropPossessorConfigProp_C::EquipPrimaryItemAfterCancelPropPossession' has a wrong offset!");

}

