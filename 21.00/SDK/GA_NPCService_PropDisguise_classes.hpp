#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_NPCService_PropDisguise

#include "Basic.hpp"

#include "GameplayTags_0_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GA_FNBR_PossessProp_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_NPCService_PropDisguise.GA_NPCService_PropDisguise_C
// 0x0060 (0x0C68 - 0x0C08)
class UGA_NPCService_PropDisguise_C final : public UGA_FNBR_PossessProp_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_GA_NPCService_PropDisguise_C;       // 0x0C08(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UClass*                                 CameraModeClass;                                   // 0x0C10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           HideBackpackTag;                                   // 0x0C18(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           HiddenWhenIdleTag;                                 // 0x0C1C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Tag;                                               // 0x0C20(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C24[0x4];                                      // 0x0C24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Duration;                                          // 0x0C28(0x0028)(Edit, BlueprintVisible)
	struct FTimerHandle                           DurationTimerHandle;                               // 0x0C50(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitGameplayTagAdded*      WaitForTagTask;                                    // 0x0C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            GE_BlockRidingHandle;                              // 0x0C60(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void UnblockRiding();
	void SelectPropToPossess(class AActor** SelectedProp_0);
	void OnDurationExpired();
	void OnDamaged_Event(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void K2_OnEndAbility(bool bWasCancelled);
	void K2_ActivateAbility();
	void ExecuteUbergraph_GA_NPCService_PropDisguise(int32 EntryPoint);
	void EventReceived_BEF97F964501A4D4E991EB9879243F3A(const struct FGameplayEventData& Payload);
	void BlockRiding();
	void Added_8AA2380C488B5923F4B693812FB1FEA1();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_NPCService_PropDisguise_C">();
	}
	static class UGA_NPCService_PropDisguise_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_NPCService_PropDisguise_C>();
	}
};
static_assert(alignof(UGA_NPCService_PropDisguise_C) == 0x000008, "Wrong alignment on UGA_NPCService_PropDisguise_C");
static_assert(sizeof(UGA_NPCService_PropDisguise_C) == 0x000C68, "Wrong size on UGA_NPCService_PropDisguise_C");
static_assert(offsetof(UGA_NPCService_PropDisguise_C, UberGraphFrame_GA_NPCService_PropDisguise_C) == 0x000C08, "Member 'UGA_NPCService_PropDisguise_C::UberGraphFrame_GA_NPCService_PropDisguise_C' has a wrong offset!");
static_assert(offsetof(UGA_NPCService_PropDisguise_C, CameraModeClass) == 0x000C10, "Member 'UGA_NPCService_PropDisguise_C::CameraModeClass' has a wrong offset!");
static_assert(offsetof(UGA_NPCService_PropDisguise_C, HideBackpackTag) == 0x000C18, "Member 'UGA_NPCService_PropDisguise_C::HideBackpackTag' has a wrong offset!");
static_assert(offsetof(UGA_NPCService_PropDisguise_C, HiddenWhenIdleTag) == 0x000C1C, "Member 'UGA_NPCService_PropDisguise_C::HiddenWhenIdleTag' has a wrong offset!");
static_assert(offsetof(UGA_NPCService_PropDisguise_C, Tag) == 0x000C20, "Member 'UGA_NPCService_PropDisguise_C::Tag' has a wrong offset!");
static_assert(offsetof(UGA_NPCService_PropDisguise_C, Duration) == 0x000C28, "Member 'UGA_NPCService_PropDisguise_C::Duration' has a wrong offset!");
static_assert(offsetof(UGA_NPCService_PropDisguise_C, DurationTimerHandle) == 0x000C50, "Member 'UGA_NPCService_PropDisguise_C::DurationTimerHandle' has a wrong offset!");
static_assert(offsetof(UGA_NPCService_PropDisguise_C, WaitForTagTask) == 0x000C58, "Member 'UGA_NPCService_PropDisguise_C::WaitForTagTask' has a wrong offset!");
static_assert(offsetof(UGA_NPCService_PropDisguise_C, GE_BlockRidingHandle) == 0x000C60, "Member 'UGA_NPCService_PropDisguise_C::GE_BlockRidingHandle' has a wrong offset!");

}

