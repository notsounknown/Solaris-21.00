#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: M_MED_The_Origin_CtrlRig

#include "Basic.hpp"

#include "RigVM_classes.hpp"
#include "ControlRig_structs.hpp"
#include "ControlRig_classes.hpp"
#include "AnimationCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// ControlRigBlueprintGeneratedClass M_MED_The_Origin_CtrlRig.M_MED_The_Origin_CtrlRig_C
// 0x0000 (0x0490 - 0x0490)
class UM_MED_The_Origin_CtrlRig_C final : public UControlRig
{
public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"M_MED_The_Origin_CtrlRig_C">();
	}
	static class UM_MED_The_Origin_CtrlRig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UM_MED_The_Origin_CtrlRig_C>();
	}
};
static_assert(alignof(UM_MED_The_Origin_CtrlRig_C) == 0x000010, "Wrong alignment on UM_MED_The_Origin_CtrlRig_C");
static_assert(sizeof(UM_MED_The_Origin_CtrlRig_C) == 0x000490, "Wrong size on UM_MED_The_Origin_CtrlRig_C");

// RigVMMemoryStorageGeneratorClass M_MED_The_Origin_CtrlRig.RigVMMemory_Literal
// 0x0040 (0x0068 - 0x0028)
class M_MED_The_Origin_CtrlRig::URigVMMemory_Literal final : public URigVMMemoryStorage
{
public:
	TArray<struct FRigUnit_ModifyTransforms_PerItem> ModifyTransforms_ItemToModify__Const;              // 0x0028(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigElementKey                         GetRelativeTransformForItem_Child__Const;          // 0x0038(0x0008)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         GetRelativeTransformForItem_bChildInitial__Const : 1; // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash))
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         GetRelativeTransformForItem_Parent__Const;         // 0x0044(0x0008)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EEulerRotationOrder                           MathQuaternionToEuler_3_1_1_2_RotationOrder__Const; // 0x004C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MathFloatRemap_4_2_2_1_1_SourceMinimum__Const;     // 0x0050(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         MathFloatRemap_4_2_2_1_1_SourceMaximum__Const;     // 0x0054(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         MathFloatRemap_4_2_2_1_1_TargetMinimum__Const;     // 0x0058(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         MathFloatRemap_4_2_2_1_1_TargetMaximum__Const;     // 0x005C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         MathFloatRemap_4_2_2_1_1_bClamp__Const : 1;        // 0x0060(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash))
	EControlRigModifyBoneMode                     ModifyTransforms_Mode__Const;                      // 0x0061(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass M_MED_The_Origin_CtrlRig.RigVMMemory_Literal", true>();
	}
	static class M_MED_The_Origin_CtrlRig::URigVMMemory_Literal* GetDefaultObj()
	{
		return GetDefaultObjImpl<M_MED_The_Origin_CtrlRig::URigVMMemory_Literal>();
	}
};
static_assert(alignof(M_MED_The_Origin_CtrlRig::URigVMMemory_Literal) == 0x000008, "Wrong alignment on M_MED_The_Origin_CtrlRig::URigVMMemory_Literal");
static_assert(sizeof(M_MED_The_Origin_CtrlRig::URigVMMemory_Literal) == 0x000068, "Wrong size on M_MED_The_Origin_CtrlRig::URigVMMemory_Literal");
static_assert(offsetof(M_MED_The_Origin_CtrlRig::URigVMMemory_Literal, ModifyTransforms_ItemToModify__Const) == 0x000028, "Member 'M_MED_The_Origin_CtrlRig::URigVMMemory_Literal::ModifyTransforms_ItemToModify__Const' has a wrong offset!");
static_assert(offsetof(M_MED_The_Origin_CtrlRig::URigVMMemory_Literal, GetRelativeTransformForItem_Child__Const) == 0x000038, "Member 'M_MED_The_Origin_CtrlRig::URigVMMemory_Literal::GetRelativeTransformForItem_Child__Const' has a wrong offset!");
static_assert(offsetof(M_MED_The_Origin_CtrlRig::URigVMMemory_Literal, GetRelativeTransformForItem_Parent__Const) == 0x000044, "Member 'M_MED_The_Origin_CtrlRig::URigVMMemory_Literal::GetRelativeTransformForItem_Parent__Const' has a wrong offset!");
static_assert(offsetof(M_MED_The_Origin_CtrlRig::URigVMMemory_Literal, MathQuaternionToEuler_3_1_1_2_RotationOrder__Const) == 0x00004C, "Member 'M_MED_The_Origin_CtrlRig::URigVMMemory_Literal::MathQuaternionToEuler_3_1_1_2_RotationOrder__Const' has a wrong offset!");
static_assert(offsetof(M_MED_The_Origin_CtrlRig::URigVMMemory_Literal, MathFloatRemap_4_2_2_1_1_SourceMinimum__Const) == 0x000050, "Member 'M_MED_The_Origin_CtrlRig::URigVMMemory_Literal::MathFloatRemap_4_2_2_1_1_SourceMinimum__Const' has a wrong offset!");
static_assert(offsetof(M_MED_The_Origin_CtrlRig::URigVMMemory_Literal, MathFloatRemap_4_2_2_1_1_SourceMaximum__Const) == 0x000054, "Member 'M_MED_The_Origin_CtrlRig::URigVMMemory_Literal::MathFloatRemap_4_2_2_1_1_SourceMaximum__Const' has a wrong offset!");
static_assert(offsetof(M_MED_The_Origin_CtrlRig::URigVMMemory_Literal, MathFloatRemap_4_2_2_1_1_TargetMinimum__Const) == 0x000058, "Member 'M_MED_The_Origin_CtrlRig::URigVMMemory_Literal::MathFloatRemap_4_2_2_1_1_TargetMinimum__Const' has a wrong offset!");
static_assert(offsetof(M_MED_The_Origin_CtrlRig::URigVMMemory_Literal, MathFloatRemap_4_2_2_1_1_TargetMaximum__Const) == 0x00005C, "Member 'M_MED_The_Origin_CtrlRig::URigVMMemory_Literal::MathFloatRemap_4_2_2_1_1_TargetMaximum__Const' has a wrong offset!");
static_assert(offsetof(M_MED_The_Origin_CtrlRig::URigVMMemory_Literal, ModifyTransforms_Mode__Const) == 0x000061, "Member 'M_MED_The_Origin_CtrlRig::URigVMMemory_Literal::ModifyTransforms_Mode__Const' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass M_MED_The_Origin_CtrlRig.RigVMMemory_Work
// 0x0158 (0x0180 - 0x0028)
class M_MED_The_Origin_CtrlRig::URigVMMemory_Work final : public URigVMMemoryStorage
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FControlRigExecuteContext              ExecuteContext_;                                   // 0x0030(0x0070)(Edit, EditConst, NonTransactional)
	float                                         MathFloatRemap_4_2_2_1_1_Result;                   // 0x00A0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         MathFloatAbs_1_1_1_Result;                         // 0x00A4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MathQuaternionToEuler_3_1_1_2_Result;              // 0x00A8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             GetRelativeTransformForItem_RelativeTransform;     // 0x00C0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	TArray<struct FCachedRigElement>              GetRelativeTransformForItem_CachedChild;           // 0x0120(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              GetRelativeTransformForItem_CachedParent;          // 0x0130(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  MathQuaternionToEuler_3_1_1_2_Value;               // 0x0140(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor)
	float                                         MathFloatAbs_1_1_1_Value;                          // 0x0160(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_ModifyTransforms_WorkData> ModifyTransforms_WorkData;                         // 0x0168(0x0010)(Edit, EditConst, NonTransactional)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass M_MED_The_Origin_CtrlRig.RigVMMemory_Work", true>();
	}
	static class M_MED_The_Origin_CtrlRig::URigVMMemory_Work* GetDefaultObj()
	{
		return GetDefaultObjImpl<M_MED_The_Origin_CtrlRig::URigVMMemory_Work>();
	}
};
static_assert(alignof(M_MED_The_Origin_CtrlRig::URigVMMemory_Work) == 0x000010, "Wrong alignment on M_MED_The_Origin_CtrlRig::URigVMMemory_Work");
static_assert(sizeof(M_MED_The_Origin_CtrlRig::URigVMMemory_Work) == 0x000180, "Wrong size on M_MED_The_Origin_CtrlRig::URigVMMemory_Work");
static_assert(offsetof(M_MED_The_Origin_CtrlRig::URigVMMemory_Work, ExecuteContext_) == 0x000030, "Member 'M_MED_The_Origin_CtrlRig::URigVMMemory_Work::ExecuteContext_' has a wrong offset!");
static_assert(offsetof(M_MED_The_Origin_CtrlRig::URigVMMemory_Work, MathFloatRemap_4_2_2_1_1_Result) == 0x0000A0, "Member 'M_MED_The_Origin_CtrlRig::URigVMMemory_Work::MathFloatRemap_4_2_2_1_1_Result' has a wrong offset!");
static_assert(offsetof(M_MED_The_Origin_CtrlRig::URigVMMemory_Work, MathFloatAbs_1_1_1_Result) == 0x0000A4, "Member 'M_MED_The_Origin_CtrlRig::URigVMMemory_Work::MathFloatAbs_1_1_1_Result' has a wrong offset!");
static_assert(offsetof(M_MED_The_Origin_CtrlRig::URigVMMemory_Work, MathQuaternionToEuler_3_1_1_2_Result) == 0x0000A8, "Member 'M_MED_The_Origin_CtrlRig::URigVMMemory_Work::MathQuaternionToEuler_3_1_1_2_Result' has a wrong offset!");
static_assert(offsetof(M_MED_The_Origin_CtrlRig::URigVMMemory_Work, GetRelativeTransformForItem_RelativeTransform) == 0x0000C0, "Member 'M_MED_The_Origin_CtrlRig::URigVMMemory_Work::GetRelativeTransformForItem_RelativeTransform' has a wrong offset!");
static_assert(offsetof(M_MED_The_Origin_CtrlRig::URigVMMemory_Work, GetRelativeTransformForItem_CachedChild) == 0x000120, "Member 'M_MED_The_Origin_CtrlRig::URigVMMemory_Work::GetRelativeTransformForItem_CachedChild' has a wrong offset!");
static_assert(offsetof(M_MED_The_Origin_CtrlRig::URigVMMemory_Work, GetRelativeTransformForItem_CachedParent) == 0x000130, "Member 'M_MED_The_Origin_CtrlRig::URigVMMemory_Work::GetRelativeTransformForItem_CachedParent' has a wrong offset!");
static_assert(offsetof(M_MED_The_Origin_CtrlRig::URigVMMemory_Work, MathQuaternionToEuler_3_1_1_2_Value) == 0x000140, "Member 'M_MED_The_Origin_CtrlRig::URigVMMemory_Work::MathQuaternionToEuler_3_1_1_2_Value' has a wrong offset!");
static_assert(offsetof(M_MED_The_Origin_CtrlRig::URigVMMemory_Work, MathFloatAbs_1_1_1_Value) == 0x000160, "Member 'M_MED_The_Origin_CtrlRig::URigVMMemory_Work::MathFloatAbs_1_1_1_Value' has a wrong offset!");
static_assert(offsetof(M_MED_The_Origin_CtrlRig::URigVMMemory_Work, ModifyTransforms_WorkData) == 0x000168, "Member 'M_MED_The_Origin_CtrlRig::URigVMMemory_Work::ModifyTransforms_WorkData' has a wrong offset!");

}

