#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Valet_BasicCar_Vehicle

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_0_structs.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ValetRuntime_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Valet_BasicCar_Vehicle.Valet_BasicCar_Vehicle_C
// 0x0BD0 (0x2B80 - 0x1FB0)
class AValet_BasicCar_Vehicle_C : public AFortDagwoodVehicle
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1FB0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortVehiclePhysicsCollisionDamageComponent* PhysicsDamageCauserComponent;                      // 0x1FB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleFuelComponent*              FuelComponent;                                     // 0x1FC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UValetLightSpawnerComponent_C*          ValetLightSpawnerComponent;                        // 0x1FC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   AudioControllerBP;                                 // 0x1FD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               FireSystem;                                        // 0x1FD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          OverlapVolume;                                     // 0x1FE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         BoostFOVRumbleTimeline_Rumble_4398A5E6444D49F8629D269235124894; // 0x1FE8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostFOVRumbleTimeline_FoV_4398A5E6444D49F8629D269235124894; // 0x1FEC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BoostFOVRumbleTimeline__Direction_4398A5E6444D49F8629D269235124894; // 0x1FF0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FF1[0x7];                                     // 0x1FF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BoostFOVRumbleTimeline;                            // 0x1FF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeLineBoostFast_JetSparksCounts_23CFE84A48582AA363A21891FC410F04; // 0x2000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeLineBoostFast_JetFlameHight_23CFE84A48582AA363A21891FC410F04; // 0x2004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TimeLineBoostFast__Direction_23CFE84A48582AA363A21891FC410F04; // 0x2008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2009[0x7];                                     // 0x2009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TimeLineBoostFast;                                 // 0x2010(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeLineBoost_JetFlameHight_46B59FC64BBD70FB1C84F292AABA9218; // 0x2018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TimeLineBoost__Direction_46B59FC64BBD70FB1C84F292AABA9218; // 0x201C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_201D[0x3];                                     // 0x201D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TimeLineBoost;                                     // 0x2020(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutOfFuel_Intensity_C83D96E348E80AB3A7B67182D3F6C892; // 0x2028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            OutOfFuel__Direction_C83D96E348E80AB3A7B67182D3F6C892; // 0x202C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_202D[0x3];                                     // 0x202D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     OutOfFuel;                                         // 0x2030(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OnDeathSound;                                      // 0x2038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpeedForAccelFX;                                // 0x2040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2044[0x4];                                     // 0x2044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        PassengerPawn;                                     // 0x2048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      DrivingPlayerController;                           // 0x2050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        DriverPawn;                                        // 0x2058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        LastDriver;                                        // 0x2060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawnAthena*                  LastHitPlayer;                                     // 0x2068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreHitLastDriver;                               // 0x2070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PassengerIsInstigator;                             // 0x2071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2072[0x6];                                     // 0x2072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         CanLaunchPlayer;                                   // 0x2078(0x0028)(Edit, BlueprintVisible, Transient)
	class APlayerController*                      PassengerPlayerController;                         // 0x20A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AFortPlayerPawn*>                Passengers;                                        // 0x20A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance)
	bool                                          Debug_NoCameraShake;                               // 0x20B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20B9[0x7];                                     // 0x20B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerPawn*>                BounceIgnoreList;                                  // 0x20C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance)
	float                                         DestructionAngle;                                  // 0x20D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EngineSoundMaxDistance;                            // 0x20D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SavedDamageValueForMID;                            // 0x20D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_20DC[0x4];                                     // 0x20DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               InWaterFX;                                         // 0x20E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 GCParamsEmpty;                                     // 0x20E8(0x00D0)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, ContainsInstancedReference)
	struct FGameplayTag                           HitPlayerCue;                                      // 0x21B8(0x0004)(Edit, BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           HitFiendCue;                                       // 0x21BC(0x0004)(Edit, BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             WaterMovementSound;                                // 0x21C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             InWaterLoopSound;                                  // 0x21C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        InWaterSplashFX;                                   // 0x21D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        InWaterLoopingFX;                                  // 0x21D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AccelRumbleIntensityFalloff;                       // 0x21E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21E4[0x4];                                     // 0x21E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        DestroyedFX;                                       // 0x21E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   MovementForceFeedback;                             // 0x21F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Movement_CameraShake;                              // 0x21F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Driver_CameraShake;                                // 0x2200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLocalPlayerADS;                                   // 0x2208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2209[0x7];                                     // 0x2209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 BigHit_CameraShake;                                // 0x2210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   BigHitForceFeedback;                               // 0x2218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   SmallHitForceFeedback;                             // 0x2220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 SmallHit_CameraShake;                              // 0x2228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   SpringCompressionForceFeedback;                    // 0x2230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMatineeCameraShake*                    DriverCameraShake;                                 // 0x2238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMatineeCameraShake*                    OffRoadCamera_Shake;                               // 0x2240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffRoadCameraShakeFalloff;                         // 0x2248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffRoadCameraSpeedForShakes;                       // 0x224C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffRoadNormalizedSpeedForRumble;                   // 0x2250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffRoadCameraMinFrequency;                         // 0x2254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffRoadCameraMaxFrequency;                         // 0x2258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffRoadCameraY_Amp;                                // 0x225C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffRoadCameraZ_Amp;                                // 0x2260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffRoadCameraRot_Amp;                              // 0x2264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AccelRumbleIntensityPower;                         // 0x2268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AccelRumbleIntensity;                              // 0x226C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LargeRumble;                                       // 0x2270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2271[0x7];                                     // 0x2271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 OffRoad_CameraShake;                               // 0x2278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VehicleMaxSpeed;                                   // 0x2280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpactEjectUpVelocity;                             // 0x2284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpactEjectForwardVelocity;                        // 0x2288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_228C[0x4];                                     // 0x228C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 OutOfFuelCameraShake;                              // 0x2290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpeedForAccelRumble;                            // 0x2298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinSkidAmountRequired;                             // 0x229C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TireSkidRumbleFalloff;                             // 0x22A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinSpeedForTireSkid;                               // 0x22A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinSpeedForBrakingSkid;                            // 0x22A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDamageToEjectDriver;                            // 0x22AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        WindshieldBreakFX;                                 // 0x22B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HandbrakeSmoke;                                    // 0x22B8(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMatineeCameraShake*                    AccelCameraShake;                                  // 0x22C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMatineeCameraShake*                    HandbrakeCameraShake;                              // 0x22C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Handbrake_CameraShake;                             // 0x22D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HandbrakeCameraShakeFalloff;                       // 0x22D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HandbrakeCameraSpeedForShakes;                     // 0x22DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalizedSpeedForRumble;                          // 0x22E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HandbrakeCameraMinFrequency;                       // 0x22E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HandbrakeCameraMaxFrequency;                       // 0x22E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HandbrakeCameraY_Amp;                              // 0x22EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HandbrakeCameraZ_Amp;                              // 0x22F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HandbrakeCameraRot_Amp;                            // 0x22F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FuelLeakPerDrop;                                   // 0x22F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FuelLeakFrequency;                                 // 0x22FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           LeakingFuelTimer;                                  // 0x2300(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bFuelLeaking;                                      // 0x2308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2309[0x7];                                     // 0x2309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      LeakObjectTrace;                                   // 0x2310(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	bool                                          bIsOnFire;                                         // 0x2320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2321[0x3];                                     // 0x2321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DripOntoFuelCount;                                 // 0x2324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DripDistanceCheck;                                 // 0x2328(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAthena_PlayerController_C*             DamagingPlayerController;                          // 0x2340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        DamagingPlayerPawn;                                // 0x2348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_DamagePlayerHit;                                // 0x2350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CameraShakeBoost;                                  // 0x2358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMatineeCameraShake*                    BoostCameraShake;                                  // 0x2360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ExplodeFX;                                         // 0x2368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_RimScrapeDamage;                                // 0x2370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LowFuelThreshold;                                  // 0x2378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_237C[0x4];                                     // 0x237C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             LowFuelWarningSound;                               // 0x2380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OutOfFuelSound_0;                                  // 0x2388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        PopTireFX;                                         // 0x2390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        WheelScrapeSparksFX;                               // 0x2398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   WheelSocket_FR;                                    // 0x23A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   WheelSocket_FL;                                    // 0x23A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   WheelSocket_BR;                                    // 0x23A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   WheelSocket_BL;                                    // 0x23AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   WheelSocketBR_Mid;                                 // 0x23B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   WheelSocketBL_Mid;                                 // 0x23B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MidR_TirePop;                                      // 0x23B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MidL_TirePop;                                      // 0x23B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBigRig;                                          // 0x23BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23BB[0x5];                                     // 0x23BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               BodyMID;                                           // 0x23C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageValue;                                       // 0x23C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23CC[0x4];                                     // 0x23CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        WheelScrapeDustFX;                                 // 0x23D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LaunchVelocity;                                    // 0x23D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         TargetedActors;                                    // 0x23F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance)
	class AFortPawn*                              ExplodeInstigator;                                 // 0x2400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_ExplodeBuildingDamage;                          // 0x2408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      ObjectArray;                                       // 0x2410(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	float                                         ExplodeRadius;                                     // 0x2420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2424[0x4];                                     // 0x2424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_ExplodePlayerDamage;                            // 0x2428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_ExplodeVehicleDamage;                           // 0x2430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ExplodeVehicleSpin;                                // 0x2438(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExplodeVehicleImpulse;                             // 0x2450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Turn_Signal_Update_Frequencey;                     // 0x2454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BasePontoonRadiusFront;                            // 0x2458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BasePontoonRadiusRear;                             // 0x245C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinPontoonRadiusToSink;                            // 0x2460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReduceRadiusTerTickRear;                           // 0x2464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReduceRadiusTerTickFront;                          // 0x2468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScalePontoonTickRateFront;                         // 0x246C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScalePontoonTickRateRear;                          // 0x2470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaledPontoonRadiusRear;                           // 0x2474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaledPontoonRadiusFront;                          // 0x2478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_247C[0x4];                                     // 0x247C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ScalePontoonTimerFront;                            // 0x2480(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ScalePontoonTimerRear;                             // 0x2488(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         FuelGainPerInteract;                               // 0x2490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2494[0x4];                                     // 0x2494(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      FX_Road_Interaction_And_Exhaust;                   // 0x2498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerSnapFoamToWaterSurface;                       // 0x24A0(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_LargeSplashFX;                                  // 0x24A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FX_LowFuelSputterSmoke;                            // 0x24B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Tire_Popped_FL;                                    // 0x24B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Tire_Popped_FR;                                    // 0x24B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Tire_Popped_RL;                                    // 0x24BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Tire_Popped_RR;                                    // 0x24BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24BC[0x4];                                     // 0x24BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Wheel_Scale_Rear;                                  // 0x24C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Wheel_Scale_Front;                                 // 0x24D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tire_Scale_Rear;                                   // 0x24F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tire_Scale_Front;                                  // 0x2508(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinSpeedForDust;                                   // 0x2520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FX_Dust_Color_Dirt;                                // 0x2524(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FX_Dust_Color_Default;                             // 0x2534(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2544[0x4];                                     // 0x2544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      FX_LeakingFuel;                                    // 0x2548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             WindowTransform_F;                                 // 0x2550(0x0060)(Edit, BlueprintVisible, Transient, IsPlainOldData, NoDestructor)
	struct FTransform                             WindowTransform_FL;                                // 0x25B0(0x0060)(Edit, BlueprintVisible, Transient, IsPlainOldData, NoDestructor)
	struct FTransform                             WindowTransform_FR;                                // 0x2610(0x0060)(Edit, BlueprintVisible, Transient, IsPlainOldData, NoDestructor)
	struct FTransform                             WindowTransform_BL;                                // 0x2670(0x0060)(Edit, BlueprintVisible, Transient, IsPlainOldData, NoDestructor)
	struct FTransform                             WindowTransform_BR;                                // 0x26D0(0x0060)(Edit, BlueprintVisible, Transient, IsPlainOldData, NoDestructor)
	struct FTransform                             WindowTransform_B;                                 // 0x2730(0x0060)(Edit, BlueprintVisible, Transient, IsPlainOldData, NoDestructor)
	bool                                          CanExplodeHack;                                    // 0x2790(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VehicleImpulseOnExplode;                           // 0x2791(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2792[0x2];                                     // 0x2792(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExplodeSpinThrustMagnitude;                        // 0x2794(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         PopTireFXNiagara;                                  // 0x2798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         ExplodeFXNiagara;                                  // 0x27A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FX_TireSkid;                                       // 0x27A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage_Stage1;                                     // 0x27B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage_Stage2;                                     // 0x27B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage_Stage3Critical;                             // 0x27B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VehicleFallSpeed;                                  // 0x27BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         WreckFXNiagara;                                    // 0x27C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Vehicle_Radio_C*                    VehicleRadio;                                      // 0x27C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastCollisionTime;                                 // 0x27D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinTimeBetweenCollision;                           // 0x27D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScrapeImpact_Strength;                             // 0x27D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isVehicleOccupied_;                                // 0x27DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27DD[0x3];                                     // 0x27DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SportCar;                                          // 0x27E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SportCarUpgrade;                                   // 0x27F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SemiTruck;                                         // 0x2800(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UNiagaraComponent*                      FX_LeakingFuel_r;                                  // 0x2810(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInDeepWater;                                     // 0x2818(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2819[0x3];                                     // 0x2819(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumWheels;                                         // 0x281C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 WheelSpringLength;                                 // 0x2820(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	float                                         SurfaceChangeTime;                                 // 0x2830(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2834[0x4];                                     // 0x2834(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 AudioControllerClass;                              // 0x2838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDepthToEject;                                   // 0x2840(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2844[0x4];                                     // 0x2844(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortWaterBodyActor*                    WaterBody;                                         // 0x2848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           WaterDepthCheckTimer;                              // 0x2850(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Explosion_CameraShake_Radius;                      // 0x2858(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnImpactFX_VehicleSpeed;                        // 0x285C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnImpactFX_VehicleSpeed_Limit;                  // 0x2860(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExplodeImpulseZ_Magnitude;                         // 0x2864(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpeedToHandbrakeHaptics;                        // 0x2868(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExplodePlayerImpulse;                              // 0x286C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScalePlayerHitImpulseBySpeed;                      // 0x2870(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScalePlayerHitImpulseNoDriver;                     // 0x2874(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RandomMatInt;                                      // 0x2878(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_287C[0x4];                                     // 0x287C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             SK_RandomMat2_Array;                               // 0x2880(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInterface*>             SK_RandomMat0_Array;                               // 0x2890(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInterface*>             SK_RandomMat1_Array;                               // 0x28A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UTexture*                               Diffuse;                                           // 0x28B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Mask;                                              // 0x28B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Normal;                                            // 0x28C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               ScratchGrime;                                      // 0x28C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               SpecularMask;                                      // 0x28D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Mid;                                               // 0x28D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DestroyedMID;                                      // 0x28E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Primary_Color;                                     // 0x28E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_ApplyInValetTag;                                // 0x28F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  InValetVehicleTag;                                 // 0x2900(0x0020)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	class UClass*                                 GE_ApplyAllowFlippingTag;                          // 0x2920(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  VehicleAllowFlippingTag;                           // 0x2928(0x0020)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	struct FScalableFloat                         HotfixCurieEnabled;                                // 0x2948(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAudioComponent*                        FuelGainedLoop;                                    // 0x2970(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             GainFuelSound;                                     // 0x2978(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentFuelGainPercent;                            // 0x2980(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2984[0x4];                                     // 0x2984(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      DamageFX;                                          // 0x2988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         RagdollEnabled;                                    // 0x2990(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AFN_RadialForce_C*                      FN_RadialForce;                                    // 0x29B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_ShouldDropLootOnDamage;                        // 0x29C0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         LootDropDamageThresholds;                          // 0x29E8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         LootDropCurentThreshold;                           // 0x2A10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LootOnDamagePackage;                               // 0x2A14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LootTossOffset;                                    // 0x2A18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A1C[0x4];                                     // 0x2A1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        FX_LootDropOnDamagedSpawn;                         // 0x2A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LootTossMin;                                       // 0x2A28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Boost_GC;                                          // 0x2A2C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         Wheel_Scrape_Sparks_FX;                            // 0x2A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         Wheel_Scrape_Dust_FX;                              // 0x2A38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_TurboBoost_FX;                                  // 0x2A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               BoostFXRotation;                                   // 0x2A48(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBoostUsesQuadExhaust;                             // 0x2A60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A61[0x3];                                     // 0x2A61(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoostQuadExhaustHorizontalOffset;                  // 0x2A64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostJetLocationOffsetX;                           // 0x2A68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostJetLocationOffsetZ;                           // 0x2A6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostJetFlameHeight;                               // 0x2A70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostJetFlameHeightMax;                            // 0x2A74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewVar_0;                                          // 0x2A78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A79[0x3];                                     // 0x2A79(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WheelWidth;                                        // 0x2A7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WheelWidthBack;                                    // 0x2A80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ExhaustColor;                                      // 0x2A84(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExhaustScale;                                      // 0x2A94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BoostCameraActive;                                 // 0x2A98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          IsBoosting;                                        // 0x2A99(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_2A9A[0x2];                                     // 0x2A9A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoostRumbleIntensity;                              // 0x2A9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         MaxBoostFOV;                                       // 0x2AA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealthPctMissingToShowDmgCrinkle;                  // 0x2AA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxCrinkleSeverity;                                // 0x2AA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AAC[0x4];                                     // 0x2AAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ExplosionDamageBuildings;                          // 0x2AB0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         CachedExplosionDamageBuildings;                    // 0x2AD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2ADC[0x4];                                     // 0x2ADC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ExplosionDamagePlayers;                            // 0x2AE0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         CachedExplosionDamagePlayers;                      // 0x2B08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B0C[0x4];                                     // 0x2B0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ExplosionDamageVehicles;                           // 0x2B10(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         CachedExplosionDamageVehicles;                     // 0x2B38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B3C[0x4];                                     // 0x2B3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_Explode_BuildingDamage;                         // 0x2B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_WreckFX;                                        // 0x2B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VehicleExploded;                                   // 0x2B50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          HandbrakeDown_;                                    // 0x2B51(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B52[0x2];                                     // 0x2B52(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GC_ApplyTireMod;                                   // 0x2B54(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         PreFadeCleanupDelay;                               // 0x2B58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B5C[0x4];                                     // 0x2B5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         NiagaraFX_PlayerImpact;                            // 0x2B60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         TemplateWaterSplashFX;                             // 0x2B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFXSystemAsset*                         TemplateScrapeImpactFX;                            // 0x2B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         TemplateBoostFX;                                   // 0x2B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AccelCameraShakeBegin();
	void AccelCameraShakeEnd();
	void ActivateBoostFX();
	void ActivateTireSmoke();
	void ApplyBuildingExplosionDamage();
	void BoostCameraReverse();
	void BoostFOV_Rumble();
	void BoostFOVRumbleTimeline__FinishedFunc();
	void BoostFOVRumbleTimeline__UpdateFunc();
	void BoostRumbleStop();
	void BP_OnBoostFinished();
	void BP_OnBoostStarted();
	void BrakingRumbleStart();
	void BrakingRumbleStop();
	void BrakingSkid(bool Condition);
	void CacheExplosionDamageValues();
	float CalcAccelRumbleIntensity(float MaxIntensity);
	struct FVector CalcImpulseDirection(class AActor* Vehicle, float Magnitude);
	void CanHitLastDriver();
	void CE_PawnEnterVehicleWhileInWater();
	void CE_PawnExitVehicleWhileInWater();
	void CE_WaterFX_ResetDeepWaterEffectActivate();
	void CheckSpeed();
	void CreateBaseMID();
	void CreateDestroyedMIDApply();
	void CreateRadio();
	void Damageable_Part_Changed(const struct FVehicleDamageablePartConfig& PartConfig, const struct FVehicleDamageablePart& Part, bool NewlyDisabled);
	void DamgeStateSetAmount();
	void DeactivateBoostFX();
	void DeactivateTireSmoke();
	void DestroyRadio();
	void DisolveVehicle(float Fade);
	void DropLootOnDamage(class AActor* DamagingActor, const struct FHitResult& HitResult);
	void EventOutOfFuel();
	void ExecuteUbergraph_Valet_BasicCar_Vehicle(int32 EntryPoint);
	void ExplodeCosmetics(class AActor* DestroyedActor);
	void FadeoutCosmetics(class AActor* DestroyedActor);
	void FX_Init_Settings();
	void GenerateRandomInt(const TArray<class UMaterialInterface*>& TargetArray);
	void GetTurnSlowMagnitude(float SteeringAngle_0, float* SlowResult);
	void HandbrakeSkid();
	void Handle_Spring_Compression_Audio();
	void HandleOnExplode(const class AController* LastDamageInstigator_0, class AFortAthenaVehicle* Vehicle);
	void HandleOnStartCriticalHealth(const class AController* LastDamageInstigator_0);
	void HandleTireSmoke();
	void HealthChanged();
	void Is_Driver_Restricted_By_Team_Setting(class AFortPlayerPawn* PlayerPawn, bool* Restricted);
	void IsVehicleAccelerating_(float MaxSpeed, bool* Return);
	void LocalPassengerADS(bool IsADS);
	void ManageAccelRumble();
	void OnCollisionHitAudio(class AActor* ActorHit, const struct FVector& Impact_Point);
	void OnCollisionHitEffects(const struct FVector& HitLocation, const struct FVector& HitNormalImpulse, const struct FVector& HitFrictionImpulse, const struct FVector& HitNormal, class AActor* HitActor, EPhysicalSurface HitSurfaceType);
	void OnCurieActive_1D9CDF534780404ABF0AA6893CD541A6();
	void OnCurieContainerAcquired_BP(const struct FCurieContainerHandle& CurieContainerHandle);
	void OnDamageablePartHealthChanged_Event(const struct FVehicleDamageablePartConfig& PartConfig, const struct FVehicleDamageablePart& Part, const bool bNewlyDisabled, const bool bNewlyEnabled);
	void OnDamaged(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FGameplayEffectContextHandle& EffectContext, class AController* EventInstigator, class AActor* DamageCauser);
	void OnEnteredWaterBody(class AFortWaterBodyActor* WaterBody_0);
	void OnEnterLandscape();
	void OnExitedWaterBody(class AFortWaterBodyActor* WaterBody_0);
	void OnExitLandscape();
	void OnFireStart();
	void OnFireStop();
	void OnGainedFuel(float NewPercent);
	void OnHoldExitStarted(class AFortPawn* ExitingPawn, const float ExitDuration);
	void OnHoldExitStopped(class AFortPawn* ExitingPawn);
	void OnHonk();
	void OnIsSprintingChanged();
	void OnModAppliedOnClient(const struct FGameplayTag& ModTag);
	void OnPawnEnterVehicle(class AFortPlayerPawn* PlayerPawn, const int32 SeatIdx);
	void OnPawnExitVehicle(class AFortPlayerPawn* PlayerPawn, class FName ExitSocketName);
	void OnReady_04DD3D3E4FBD21BFC0E43DAB4B40FA90(class AGameStateBase* GameState);
	void OnRep_RandomMatInt();
	void OnRimScrapeDamage(int32 TireIndex);
	void OnSleepStateChanged(const bool bAwake);
	void OnSpringCompression();
	void OnStartHandbrake();
	void OnStopHandbrake();
	void OnStopTick();
	void OnSurfaceTypeVehicleIsOnChanged(EPhysicalSurface SurfaceTypeVehicleIsOn);
	void OnTickAudioController(float DeltaTime);
	void OnTickAudioFade(float FadeParam);
	void OnWaterTooDeep();
	void OutOfFuel__FinishedFunc();
	void OutOfFuel__UpdateFunc();
	void PawnHitByVehicle(class AFortPawn* Pawn, const struct FVector& ImpactPoint, const struct FVector& ImpactNormal, const struct FVector& LaunchVector);
	void PickRandomMaterial();
	void PlayHapticsOnHit(float HitMagnitude);
	void RadioGo(bool Start, int32 RadioStationIndex);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ResetLastHitPlayer();
	void ReverseBoostTimeline();
	void ScalePontoonFront();
	void ScalePontoonRear();
	void SendDamageValueToMaterials(const float ParameterValue);
	void SetFallInstigator(class AFortPlayerPawnAthena* Pawn);
	void SetFxSettingsForVehicleType();
	void ShiftBlip(bool bUpshift);
	void SkidRumbleStart();
	void SkidRumbleStop();
	void SnapFoamtoWaterSurface();
	void SpawnWreckFX();
	void StartAccelRumble();
	void StartBoostRumble();
	void StartDriverCameraShake();
	void StartHandbrakeCameraShake();
	void StartOutOfGasRumble();
	void StopAccelRumble();
	void StopBoostCameraShake();
	void StopBoostRumble();
	void StopDriverCameraShake();
	void StopHandbrakeCameraShake();
	void StopHandbrakeHaptics();
	void StopHandbrakeRumble();
	void StopOutOfGasRumble();
	void TimeLineBoost__FinishedFunc();
	void TimeLineBoost__UpdateFunc();
	void TimeLineBoostFast__FinishedFunc();
	void TimeLineBoostFast__UpdateFunc();
	void TireSkid(bool Condition);
	void ToggleDustFX(bool InValue);
	void ToggleGlassFX(class FName AttachPointName, const struct FTransform& InTransform);
	void TurnSignalsandBrakes();
	void Update_Damage_State(float Damage);
	void UpdateBoostRumble();
	void UpdateHandbrakeCameraShake();
	void UpdateMovementCosmeticParameters();
	void UserConstructionScript();
	void VFX_DamageState(float Damage);

	void GetIconPlacement(const class AActor* SelfActor, const class AActor* ViewingActor, struct FVector* OutLocation, struct FVector* OutExtents) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Valet_BasicCar_Vehicle_C">();
	}
	static class AValet_BasicCar_Vehicle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AValet_BasicCar_Vehicle_C>();
	}
};
static_assert(alignof(AValet_BasicCar_Vehicle_C) == 0x000010, "Wrong alignment on AValet_BasicCar_Vehicle_C");
static_assert(sizeof(AValet_BasicCar_Vehicle_C) == 0x002B80, "Wrong size on AValet_BasicCar_Vehicle_C");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, UberGraphFrame) == 0x001FB0, "Member 'AValet_BasicCar_Vehicle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, PhysicsDamageCauserComponent) == 0x001FB8, "Member 'AValet_BasicCar_Vehicle_C::PhysicsDamageCauserComponent' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FuelComponent) == 0x001FC0, "Member 'AValet_BasicCar_Vehicle_C::FuelComponent' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ValetLightSpawnerComponent) == 0x001FC8, "Member 'AValet_BasicCar_Vehicle_C::ValetLightSpawnerComponent' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, AudioControllerBP) == 0x001FD0, "Member 'AValet_BasicCar_Vehicle_C::AudioControllerBP' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FireSystem) == 0x001FD8, "Member 'AValet_BasicCar_Vehicle_C::FireSystem' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OverlapVolume) == 0x001FE0, "Member 'AValet_BasicCar_Vehicle_C::OverlapVolume' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BoostFOVRumbleTimeline_Rumble_4398A5E6444D49F8629D269235124894) == 0x001FE8, "Member 'AValet_BasicCar_Vehicle_C::BoostFOVRumbleTimeline_Rumble_4398A5E6444D49F8629D269235124894' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BoostFOVRumbleTimeline_FoV_4398A5E6444D49F8629D269235124894) == 0x001FEC, "Member 'AValet_BasicCar_Vehicle_C::BoostFOVRumbleTimeline_FoV_4398A5E6444D49F8629D269235124894' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BoostFOVRumbleTimeline__Direction_4398A5E6444D49F8629D269235124894) == 0x001FF0, "Member 'AValet_BasicCar_Vehicle_C::BoostFOVRumbleTimeline__Direction_4398A5E6444D49F8629D269235124894' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BoostFOVRumbleTimeline) == 0x001FF8, "Member 'AValet_BasicCar_Vehicle_C::BoostFOVRumbleTimeline' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, TimeLineBoostFast_JetSparksCounts_23CFE84A48582AA363A21891FC410F04) == 0x002000, "Member 'AValet_BasicCar_Vehicle_C::TimeLineBoostFast_JetSparksCounts_23CFE84A48582AA363A21891FC410F04' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, TimeLineBoostFast_JetFlameHight_23CFE84A48582AA363A21891FC410F04) == 0x002004, "Member 'AValet_BasicCar_Vehicle_C::TimeLineBoostFast_JetFlameHight_23CFE84A48582AA363A21891FC410F04' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, TimeLineBoostFast__Direction_23CFE84A48582AA363A21891FC410F04) == 0x002008, "Member 'AValet_BasicCar_Vehicle_C::TimeLineBoostFast__Direction_23CFE84A48582AA363A21891FC410F04' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, TimeLineBoostFast) == 0x002010, "Member 'AValet_BasicCar_Vehicle_C::TimeLineBoostFast' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, TimeLineBoost_JetFlameHight_46B59FC64BBD70FB1C84F292AABA9218) == 0x002018, "Member 'AValet_BasicCar_Vehicle_C::TimeLineBoost_JetFlameHight_46B59FC64BBD70FB1C84F292AABA9218' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, TimeLineBoost__Direction_46B59FC64BBD70FB1C84F292AABA9218) == 0x00201C, "Member 'AValet_BasicCar_Vehicle_C::TimeLineBoost__Direction_46B59FC64BBD70FB1C84F292AABA9218' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, TimeLineBoost) == 0x002020, "Member 'AValet_BasicCar_Vehicle_C::TimeLineBoost' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OutOfFuel_Intensity_C83D96E348E80AB3A7B67182D3F6C892) == 0x002028, "Member 'AValet_BasicCar_Vehicle_C::OutOfFuel_Intensity_C83D96E348E80AB3A7B67182D3F6C892' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OutOfFuel__Direction_C83D96E348E80AB3A7B67182D3F6C892) == 0x00202C, "Member 'AValet_BasicCar_Vehicle_C::OutOfFuel__Direction_C83D96E348E80AB3A7B67182D3F6C892' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OutOfFuel) == 0x002030, "Member 'AValet_BasicCar_Vehicle_C::OutOfFuel' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OnDeathSound) == 0x002038, "Member 'AValet_BasicCar_Vehicle_C::OnDeathSound' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MaxSpeedForAccelFX) == 0x002040, "Member 'AValet_BasicCar_Vehicle_C::MaxSpeedForAccelFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, PassengerPawn) == 0x002048, "Member 'AValet_BasicCar_Vehicle_C::PassengerPawn' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DrivingPlayerController) == 0x002050, "Member 'AValet_BasicCar_Vehicle_C::DrivingPlayerController' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DriverPawn) == 0x002058, "Member 'AValet_BasicCar_Vehicle_C::DriverPawn' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, LastDriver) == 0x002060, "Member 'AValet_BasicCar_Vehicle_C::LastDriver' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, LastHitPlayer) == 0x002068, "Member 'AValet_BasicCar_Vehicle_C::LastHitPlayer' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, IgnoreHitLastDriver) == 0x002070, "Member 'AValet_BasicCar_Vehicle_C::IgnoreHitLastDriver' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, PassengerIsInstigator) == 0x002071, "Member 'AValet_BasicCar_Vehicle_C::PassengerIsInstigator' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, CanLaunchPlayer) == 0x002078, "Member 'AValet_BasicCar_Vehicle_C::CanLaunchPlayer' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, PassengerPlayerController) == 0x0020A0, "Member 'AValet_BasicCar_Vehicle_C::PassengerPlayerController' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Passengers) == 0x0020A8, "Member 'AValet_BasicCar_Vehicle_C::Passengers' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Debug_NoCameraShake) == 0x0020B8, "Member 'AValet_BasicCar_Vehicle_C::Debug_NoCameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BounceIgnoreList) == 0x0020C0, "Member 'AValet_BasicCar_Vehicle_C::BounceIgnoreList' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DestructionAngle) == 0x0020D0, "Member 'AValet_BasicCar_Vehicle_C::DestructionAngle' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, EngineSoundMaxDistance) == 0x0020D4, "Member 'AValet_BasicCar_Vehicle_C::EngineSoundMaxDistance' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SavedDamageValueForMID) == 0x0020D8, "Member 'AValet_BasicCar_Vehicle_C::SavedDamageValueForMID' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, InWaterFX) == 0x0020E0, "Member 'AValet_BasicCar_Vehicle_C::InWaterFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, GCParamsEmpty) == 0x0020E8, "Member 'AValet_BasicCar_Vehicle_C::GCParamsEmpty' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HitPlayerCue) == 0x0021B8, "Member 'AValet_BasicCar_Vehicle_C::HitPlayerCue' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HitFiendCue) == 0x0021BC, "Member 'AValet_BasicCar_Vehicle_C::HitFiendCue' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WaterMovementSound) == 0x0021C0, "Member 'AValet_BasicCar_Vehicle_C::WaterMovementSound' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, InWaterLoopSound) == 0x0021C8, "Member 'AValet_BasicCar_Vehicle_C::InWaterLoopSound' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, InWaterSplashFX) == 0x0021D0, "Member 'AValet_BasicCar_Vehicle_C::InWaterSplashFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, InWaterLoopingFX) == 0x0021D8, "Member 'AValet_BasicCar_Vehicle_C::InWaterLoopingFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, AccelRumbleIntensityFalloff) == 0x0021E0, "Member 'AValet_BasicCar_Vehicle_C::AccelRumbleIntensityFalloff' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DestroyedFX) == 0x0021E8, "Member 'AValet_BasicCar_Vehicle_C::DestroyedFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MovementForceFeedback) == 0x0021F0, "Member 'AValet_BasicCar_Vehicle_C::MovementForceFeedback' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Movement_CameraShake) == 0x0021F8, "Member 'AValet_BasicCar_Vehicle_C::Movement_CameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Driver_CameraShake) == 0x002200, "Member 'AValet_BasicCar_Vehicle_C::Driver_CameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, bLocalPlayerADS) == 0x002208, "Member 'AValet_BasicCar_Vehicle_C::bLocalPlayerADS' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BigHit_CameraShake) == 0x002210, "Member 'AValet_BasicCar_Vehicle_C::BigHit_CameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BigHitForceFeedback) == 0x002218, "Member 'AValet_BasicCar_Vehicle_C::BigHitForceFeedback' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SmallHitForceFeedback) == 0x002220, "Member 'AValet_BasicCar_Vehicle_C::SmallHitForceFeedback' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SmallHit_CameraShake) == 0x002228, "Member 'AValet_BasicCar_Vehicle_C::SmallHit_CameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SpringCompressionForceFeedback) == 0x002230, "Member 'AValet_BasicCar_Vehicle_C::SpringCompressionForceFeedback' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DriverCameraShake) == 0x002238, "Member 'AValet_BasicCar_Vehicle_C::DriverCameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OffRoadCamera_Shake) == 0x002240, "Member 'AValet_BasicCar_Vehicle_C::OffRoadCamera_Shake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OffRoadCameraShakeFalloff) == 0x002248, "Member 'AValet_BasicCar_Vehicle_C::OffRoadCameraShakeFalloff' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OffRoadCameraSpeedForShakes) == 0x00224C, "Member 'AValet_BasicCar_Vehicle_C::OffRoadCameraSpeedForShakes' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OffRoadNormalizedSpeedForRumble) == 0x002250, "Member 'AValet_BasicCar_Vehicle_C::OffRoadNormalizedSpeedForRumble' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OffRoadCameraMinFrequency) == 0x002254, "Member 'AValet_BasicCar_Vehicle_C::OffRoadCameraMinFrequency' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OffRoadCameraMaxFrequency) == 0x002258, "Member 'AValet_BasicCar_Vehicle_C::OffRoadCameraMaxFrequency' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OffRoadCameraY_Amp) == 0x00225C, "Member 'AValet_BasicCar_Vehicle_C::OffRoadCameraY_Amp' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OffRoadCameraZ_Amp) == 0x002260, "Member 'AValet_BasicCar_Vehicle_C::OffRoadCameraZ_Amp' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OffRoadCameraRot_Amp) == 0x002264, "Member 'AValet_BasicCar_Vehicle_C::OffRoadCameraRot_Amp' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, AccelRumbleIntensityPower) == 0x002268, "Member 'AValet_BasicCar_Vehicle_C::AccelRumbleIntensityPower' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, AccelRumbleIntensity) == 0x00226C, "Member 'AValet_BasicCar_Vehicle_C::AccelRumbleIntensity' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, LargeRumble) == 0x002270, "Member 'AValet_BasicCar_Vehicle_C::LargeRumble' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OffRoad_CameraShake) == 0x002278, "Member 'AValet_BasicCar_Vehicle_C::OffRoad_CameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, VehicleMaxSpeed) == 0x002280, "Member 'AValet_BasicCar_Vehicle_C::VehicleMaxSpeed' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ImpactEjectUpVelocity) == 0x002284, "Member 'AValet_BasicCar_Vehicle_C::ImpactEjectUpVelocity' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ImpactEjectForwardVelocity) == 0x002288, "Member 'AValet_BasicCar_Vehicle_C::ImpactEjectForwardVelocity' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OutOfFuelCameraShake) == 0x002290, "Member 'AValet_BasicCar_Vehicle_C::OutOfFuelCameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MaxSpeedForAccelRumble) == 0x002298, "Member 'AValet_BasicCar_Vehicle_C::MaxSpeedForAccelRumble' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MinSkidAmountRequired) == 0x00229C, "Member 'AValet_BasicCar_Vehicle_C::MinSkidAmountRequired' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, TireSkidRumbleFalloff) == 0x0022A0, "Member 'AValet_BasicCar_Vehicle_C::TireSkidRumbleFalloff' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MinSpeedForTireSkid) == 0x0022A4, "Member 'AValet_BasicCar_Vehicle_C::MinSpeedForTireSkid' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MinSpeedForBrakingSkid) == 0x0022A8, "Member 'AValet_BasicCar_Vehicle_C::MinSpeedForBrakingSkid' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MinDamageToEjectDriver) == 0x0022AC, "Member 'AValet_BasicCar_Vehicle_C::MinDamageToEjectDriver' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WindshieldBreakFX) == 0x0022B0, "Member 'AValet_BasicCar_Vehicle_C::WindshieldBreakFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HandbrakeSmoke) == 0x0022B8, "Member 'AValet_BasicCar_Vehicle_C::HandbrakeSmoke' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, AccelCameraShake) == 0x0022C0, "Member 'AValet_BasicCar_Vehicle_C::AccelCameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HandbrakeCameraShake) == 0x0022C8, "Member 'AValet_BasicCar_Vehicle_C::HandbrakeCameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Handbrake_CameraShake) == 0x0022D0, "Member 'AValet_BasicCar_Vehicle_C::Handbrake_CameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HandbrakeCameraShakeFalloff) == 0x0022D8, "Member 'AValet_BasicCar_Vehicle_C::HandbrakeCameraShakeFalloff' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HandbrakeCameraSpeedForShakes) == 0x0022DC, "Member 'AValet_BasicCar_Vehicle_C::HandbrakeCameraSpeedForShakes' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, NormalizedSpeedForRumble) == 0x0022E0, "Member 'AValet_BasicCar_Vehicle_C::NormalizedSpeedForRumble' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HandbrakeCameraMinFrequency) == 0x0022E4, "Member 'AValet_BasicCar_Vehicle_C::HandbrakeCameraMinFrequency' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HandbrakeCameraMaxFrequency) == 0x0022E8, "Member 'AValet_BasicCar_Vehicle_C::HandbrakeCameraMaxFrequency' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HandbrakeCameraY_Amp) == 0x0022EC, "Member 'AValet_BasicCar_Vehicle_C::HandbrakeCameraY_Amp' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HandbrakeCameraZ_Amp) == 0x0022F0, "Member 'AValet_BasicCar_Vehicle_C::HandbrakeCameraZ_Amp' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HandbrakeCameraRot_Amp) == 0x0022F4, "Member 'AValet_BasicCar_Vehicle_C::HandbrakeCameraRot_Amp' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FuelLeakPerDrop) == 0x0022F8, "Member 'AValet_BasicCar_Vehicle_C::FuelLeakPerDrop' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FuelLeakFrequency) == 0x0022FC, "Member 'AValet_BasicCar_Vehicle_C::FuelLeakFrequency' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, LeakingFuelTimer) == 0x002300, "Member 'AValet_BasicCar_Vehicle_C::LeakingFuelTimer' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, bFuelLeaking) == 0x002308, "Member 'AValet_BasicCar_Vehicle_C::bFuelLeaking' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, LeakObjectTrace) == 0x002310, "Member 'AValet_BasicCar_Vehicle_C::LeakObjectTrace' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, bIsOnFire) == 0x002320, "Member 'AValet_BasicCar_Vehicle_C::bIsOnFire' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DripOntoFuelCount) == 0x002324, "Member 'AValet_BasicCar_Vehicle_C::DripOntoFuelCount' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DripDistanceCheck) == 0x002328, "Member 'AValet_BasicCar_Vehicle_C::DripDistanceCheck' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DamagingPlayerController) == 0x002340, "Member 'AValet_BasicCar_Vehicle_C::DamagingPlayerController' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DamagingPlayerPawn) == 0x002348, "Member 'AValet_BasicCar_Vehicle_C::DamagingPlayerPawn' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, GE_DamagePlayerHit) == 0x002350, "Member 'AValet_BasicCar_Vehicle_C::GE_DamagePlayerHit' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, CameraShakeBoost) == 0x002358, "Member 'AValet_BasicCar_Vehicle_C::CameraShakeBoost' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BoostCameraShake) == 0x002360, "Member 'AValet_BasicCar_Vehicle_C::BoostCameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ExplodeFX) == 0x002368, "Member 'AValet_BasicCar_Vehicle_C::ExplodeFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, GE_RimScrapeDamage) == 0x002370, "Member 'AValet_BasicCar_Vehicle_C::GE_RimScrapeDamage' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, LowFuelThreshold) == 0x002378, "Member 'AValet_BasicCar_Vehicle_C::LowFuelThreshold' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, LowFuelWarningSound) == 0x002380, "Member 'AValet_BasicCar_Vehicle_C::LowFuelWarningSound' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OutOfFuelSound_0) == 0x002388, "Member 'AValet_BasicCar_Vehicle_C::OutOfFuelSound_0' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, PopTireFX) == 0x002390, "Member 'AValet_BasicCar_Vehicle_C::PopTireFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WheelScrapeSparksFX) == 0x002398, "Member 'AValet_BasicCar_Vehicle_C::WheelScrapeSparksFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WheelSocket_FR) == 0x0023A0, "Member 'AValet_BasicCar_Vehicle_C::WheelSocket_FR' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WheelSocket_FL) == 0x0023A4, "Member 'AValet_BasicCar_Vehicle_C::WheelSocket_FL' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WheelSocket_BR) == 0x0023A8, "Member 'AValet_BasicCar_Vehicle_C::WheelSocket_BR' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WheelSocket_BL) == 0x0023AC, "Member 'AValet_BasicCar_Vehicle_C::WheelSocket_BL' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WheelSocketBR_Mid) == 0x0023B0, "Member 'AValet_BasicCar_Vehicle_C::WheelSocketBR_Mid' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WheelSocketBL_Mid) == 0x0023B4, "Member 'AValet_BasicCar_Vehicle_C::WheelSocketBL_Mid' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MidR_TirePop) == 0x0023B8, "Member 'AValet_BasicCar_Vehicle_C::MidR_TirePop' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MidL_TirePop) == 0x0023B9, "Member 'AValet_BasicCar_Vehicle_C::MidL_TirePop' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, IsBigRig) == 0x0023BA, "Member 'AValet_BasicCar_Vehicle_C::IsBigRig' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BodyMID) == 0x0023C0, "Member 'AValet_BasicCar_Vehicle_C::BodyMID' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DamageValue) == 0x0023C8, "Member 'AValet_BasicCar_Vehicle_C::DamageValue' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WheelScrapeDustFX) == 0x0023D0, "Member 'AValet_BasicCar_Vehicle_C::WheelScrapeDustFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, LaunchVelocity) == 0x0023D8, "Member 'AValet_BasicCar_Vehicle_C::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, TargetedActors) == 0x0023F0, "Member 'AValet_BasicCar_Vehicle_C::TargetedActors' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ExplodeInstigator) == 0x002400, "Member 'AValet_BasicCar_Vehicle_C::ExplodeInstigator' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, GE_ExplodeBuildingDamage) == 0x002408, "Member 'AValet_BasicCar_Vehicle_C::GE_ExplodeBuildingDamage' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ObjectArray) == 0x002410, "Member 'AValet_BasicCar_Vehicle_C::ObjectArray' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ExplodeRadius) == 0x002420, "Member 'AValet_BasicCar_Vehicle_C::ExplodeRadius' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, GE_ExplodePlayerDamage) == 0x002428, "Member 'AValet_BasicCar_Vehicle_C::GE_ExplodePlayerDamage' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, GE_ExplodeVehicleDamage) == 0x002430, "Member 'AValet_BasicCar_Vehicle_C::GE_ExplodeVehicleDamage' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ExplodeVehicleSpin) == 0x002438, "Member 'AValet_BasicCar_Vehicle_C::ExplodeVehicleSpin' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ExplodeVehicleImpulse) == 0x002450, "Member 'AValet_BasicCar_Vehicle_C::ExplodeVehicleImpulse' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Turn_Signal_Update_Frequencey) == 0x002454, "Member 'AValet_BasicCar_Vehicle_C::Turn_Signal_Update_Frequencey' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BasePontoonRadiusFront) == 0x002458, "Member 'AValet_BasicCar_Vehicle_C::BasePontoonRadiusFront' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BasePontoonRadiusRear) == 0x00245C, "Member 'AValet_BasicCar_Vehicle_C::BasePontoonRadiusRear' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MinPontoonRadiusToSink) == 0x002460, "Member 'AValet_BasicCar_Vehicle_C::MinPontoonRadiusToSink' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ReduceRadiusTerTickRear) == 0x002464, "Member 'AValet_BasicCar_Vehicle_C::ReduceRadiusTerTickRear' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ReduceRadiusTerTickFront) == 0x002468, "Member 'AValet_BasicCar_Vehicle_C::ReduceRadiusTerTickFront' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ScalePontoonTickRateFront) == 0x00246C, "Member 'AValet_BasicCar_Vehicle_C::ScalePontoonTickRateFront' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ScalePontoonTickRateRear) == 0x002470, "Member 'AValet_BasicCar_Vehicle_C::ScalePontoonTickRateRear' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ScaledPontoonRadiusRear) == 0x002474, "Member 'AValet_BasicCar_Vehicle_C::ScaledPontoonRadiusRear' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ScaledPontoonRadiusFront) == 0x002478, "Member 'AValet_BasicCar_Vehicle_C::ScaledPontoonRadiusFront' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ScalePontoonTimerFront) == 0x002480, "Member 'AValet_BasicCar_Vehicle_C::ScalePontoonTimerFront' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ScalePontoonTimerRear) == 0x002488, "Member 'AValet_BasicCar_Vehicle_C::ScalePontoonTimerRear' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FuelGainPerInteract) == 0x002490, "Member 'AValet_BasicCar_Vehicle_C::FuelGainPerInteract' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FX_Road_Interaction_And_Exhaust) == 0x002498, "Member 'AValet_BasicCar_Vehicle_C::FX_Road_Interaction_And_Exhaust' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, TimerSnapFoamToWaterSurface) == 0x0024A0, "Member 'AValet_BasicCar_Vehicle_C::TimerSnapFoamToWaterSurface' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, NS_LargeSplashFX) == 0x0024A8, "Member 'AValet_BasicCar_Vehicle_C::NS_LargeSplashFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FX_LowFuelSputterSmoke) == 0x0024B0, "Member 'AValet_BasicCar_Vehicle_C::FX_LowFuelSputterSmoke' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Tire_Popped_FL) == 0x0024B8, "Member 'AValet_BasicCar_Vehicle_C::Tire_Popped_FL' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Tire_Popped_FR) == 0x0024B9, "Member 'AValet_BasicCar_Vehicle_C::Tire_Popped_FR' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Tire_Popped_RL) == 0x0024BA, "Member 'AValet_BasicCar_Vehicle_C::Tire_Popped_RL' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Tire_Popped_RR) == 0x0024BB, "Member 'AValet_BasicCar_Vehicle_C::Tire_Popped_RR' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Wheel_Scale_Rear) == 0x0024C0, "Member 'AValet_BasicCar_Vehicle_C::Wheel_Scale_Rear' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Wheel_Scale_Front) == 0x0024D8, "Member 'AValet_BasicCar_Vehicle_C::Wheel_Scale_Front' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Tire_Scale_Rear) == 0x0024F0, "Member 'AValet_BasicCar_Vehicle_C::Tire_Scale_Rear' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Tire_Scale_Front) == 0x002508, "Member 'AValet_BasicCar_Vehicle_C::Tire_Scale_Front' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MinSpeedForDust) == 0x002520, "Member 'AValet_BasicCar_Vehicle_C::MinSpeedForDust' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FX_Dust_Color_Dirt) == 0x002524, "Member 'AValet_BasicCar_Vehicle_C::FX_Dust_Color_Dirt' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FX_Dust_Color_Default) == 0x002534, "Member 'AValet_BasicCar_Vehicle_C::FX_Dust_Color_Default' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FX_LeakingFuel) == 0x002548, "Member 'AValet_BasicCar_Vehicle_C::FX_LeakingFuel' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WindowTransform_F) == 0x002550, "Member 'AValet_BasicCar_Vehicle_C::WindowTransform_F' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WindowTransform_FL) == 0x0025B0, "Member 'AValet_BasicCar_Vehicle_C::WindowTransform_FL' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WindowTransform_FR) == 0x002610, "Member 'AValet_BasicCar_Vehicle_C::WindowTransform_FR' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WindowTransform_BL) == 0x002670, "Member 'AValet_BasicCar_Vehicle_C::WindowTransform_BL' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WindowTransform_BR) == 0x0026D0, "Member 'AValet_BasicCar_Vehicle_C::WindowTransform_BR' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WindowTransform_B) == 0x002730, "Member 'AValet_BasicCar_Vehicle_C::WindowTransform_B' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, CanExplodeHack) == 0x002790, "Member 'AValet_BasicCar_Vehicle_C::CanExplodeHack' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, VehicleImpulseOnExplode) == 0x002791, "Member 'AValet_BasicCar_Vehicle_C::VehicleImpulseOnExplode' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ExplodeSpinThrustMagnitude) == 0x002794, "Member 'AValet_BasicCar_Vehicle_C::ExplodeSpinThrustMagnitude' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, PopTireFXNiagara) == 0x002798, "Member 'AValet_BasicCar_Vehicle_C::PopTireFXNiagara' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ExplodeFXNiagara) == 0x0027A0, "Member 'AValet_BasicCar_Vehicle_C::ExplodeFXNiagara' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FX_TireSkid) == 0x0027A8, "Member 'AValet_BasicCar_Vehicle_C::FX_TireSkid' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Damage_Stage1) == 0x0027B0, "Member 'AValet_BasicCar_Vehicle_C::Damage_Stage1' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Damage_Stage2) == 0x0027B4, "Member 'AValet_BasicCar_Vehicle_C::Damage_Stage2' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Damage_Stage3Critical) == 0x0027B8, "Member 'AValet_BasicCar_Vehicle_C::Damage_Stage3Critical' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, VehicleFallSpeed) == 0x0027BC, "Member 'AValet_BasicCar_Vehicle_C::VehicleFallSpeed' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WreckFXNiagara) == 0x0027C0, "Member 'AValet_BasicCar_Vehicle_C::WreckFXNiagara' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, VehicleRadio) == 0x0027C8, "Member 'AValet_BasicCar_Vehicle_C::VehicleRadio' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, LastCollisionTime) == 0x0027D0, "Member 'AValet_BasicCar_Vehicle_C::LastCollisionTime' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MinTimeBetweenCollision) == 0x0027D4, "Member 'AValet_BasicCar_Vehicle_C::MinTimeBetweenCollision' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ScrapeImpact_Strength) == 0x0027D8, "Member 'AValet_BasicCar_Vehicle_C::ScrapeImpact_Strength' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, isVehicleOccupied_) == 0x0027DC, "Member 'AValet_BasicCar_Vehicle_C::isVehicleOccupied_' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SportCar) == 0x0027E0, "Member 'AValet_BasicCar_Vehicle_C::SportCar' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SportCarUpgrade) == 0x0027F0, "Member 'AValet_BasicCar_Vehicle_C::SportCarUpgrade' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SemiTruck) == 0x002800, "Member 'AValet_BasicCar_Vehicle_C::SemiTruck' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FX_LeakingFuel_r) == 0x002810, "Member 'AValet_BasicCar_Vehicle_C::FX_LeakingFuel_r' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, IsInDeepWater) == 0x002818, "Member 'AValet_BasicCar_Vehicle_C::IsInDeepWater' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, NumWheels) == 0x00281C, "Member 'AValet_BasicCar_Vehicle_C::NumWheels' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WheelSpringLength) == 0x002820, "Member 'AValet_BasicCar_Vehicle_C::WheelSpringLength' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SurfaceChangeTime) == 0x002830, "Member 'AValet_BasicCar_Vehicle_C::SurfaceChangeTime' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, AudioControllerClass) == 0x002838, "Member 'AValet_BasicCar_Vehicle_C::AudioControllerClass' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MaxDepthToEject) == 0x002840, "Member 'AValet_BasicCar_Vehicle_C::MaxDepthToEject' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WaterBody) == 0x002848, "Member 'AValet_BasicCar_Vehicle_C::WaterBody' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WaterDepthCheckTimer) == 0x002850, "Member 'AValet_BasicCar_Vehicle_C::WaterDepthCheckTimer' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Explosion_CameraShake_Radius) == 0x002858, "Member 'AValet_BasicCar_Vehicle_C::Explosion_CameraShake_Radius' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SpawnImpactFX_VehicleSpeed) == 0x00285C, "Member 'AValet_BasicCar_Vehicle_C::SpawnImpactFX_VehicleSpeed' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SpawnImpactFX_VehicleSpeed_Limit) == 0x002860, "Member 'AValet_BasicCar_Vehicle_C::SpawnImpactFX_VehicleSpeed_Limit' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ExplodeImpulseZ_Magnitude) == 0x002864, "Member 'AValet_BasicCar_Vehicle_C::ExplodeImpulseZ_Magnitude' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MaxSpeedToHandbrakeHaptics) == 0x002868, "Member 'AValet_BasicCar_Vehicle_C::MaxSpeedToHandbrakeHaptics' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ExplodePlayerImpulse) == 0x00286C, "Member 'AValet_BasicCar_Vehicle_C::ExplodePlayerImpulse' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ScalePlayerHitImpulseBySpeed) == 0x002870, "Member 'AValet_BasicCar_Vehicle_C::ScalePlayerHitImpulseBySpeed' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ScalePlayerHitImpulseNoDriver) == 0x002874, "Member 'AValet_BasicCar_Vehicle_C::ScalePlayerHitImpulseNoDriver' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, RandomMatInt) == 0x002878, "Member 'AValet_BasicCar_Vehicle_C::RandomMatInt' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SK_RandomMat2_Array) == 0x002880, "Member 'AValet_BasicCar_Vehicle_C::SK_RandomMat2_Array' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SK_RandomMat0_Array) == 0x002890, "Member 'AValet_BasicCar_Vehicle_C::SK_RandomMat0_Array' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SK_RandomMat1_Array) == 0x0028A0, "Member 'AValet_BasicCar_Vehicle_C::SK_RandomMat1_Array' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Diffuse) == 0x0028B0, "Member 'AValet_BasicCar_Vehicle_C::Diffuse' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Mask) == 0x0028B8, "Member 'AValet_BasicCar_Vehicle_C::Mask' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Normal) == 0x0028C0, "Member 'AValet_BasicCar_Vehicle_C::Normal' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ScratchGrime) == 0x0028C8, "Member 'AValet_BasicCar_Vehicle_C::ScratchGrime' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SpecularMask) == 0x0028D0, "Member 'AValet_BasicCar_Vehicle_C::SpecularMask' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Mid) == 0x0028D8, "Member 'AValet_BasicCar_Vehicle_C::Mid' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DestroyedMID) == 0x0028E0, "Member 'AValet_BasicCar_Vehicle_C::DestroyedMID' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Primary_Color) == 0x0028E8, "Member 'AValet_BasicCar_Vehicle_C::Primary_Color' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, GE_ApplyInValetTag) == 0x0028F8, "Member 'AValet_BasicCar_Vehicle_C::GE_ApplyInValetTag' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, InValetVehicleTag) == 0x002900, "Member 'AValet_BasicCar_Vehicle_C::InValetVehicleTag' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, GE_ApplyAllowFlippingTag) == 0x002920, "Member 'AValet_BasicCar_Vehicle_C::GE_ApplyAllowFlippingTag' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, VehicleAllowFlippingTag) == 0x002928, "Member 'AValet_BasicCar_Vehicle_C::VehicleAllowFlippingTag' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HotfixCurieEnabled) == 0x002948, "Member 'AValet_BasicCar_Vehicle_C::HotfixCurieEnabled' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FuelGainedLoop) == 0x002970, "Member 'AValet_BasicCar_Vehicle_C::FuelGainedLoop' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, GainFuelSound) == 0x002978, "Member 'AValet_BasicCar_Vehicle_C::GainFuelSound' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, CurrentFuelGainPercent) == 0x002980, "Member 'AValet_BasicCar_Vehicle_C::CurrentFuelGainPercent' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DamageFX) == 0x002988, "Member 'AValet_BasicCar_Vehicle_C::DamageFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, RagdollEnabled) == 0x002990, "Member 'AValet_BasicCar_Vehicle_C::RagdollEnabled' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FN_RadialForce) == 0x0029B8, "Member 'AValet_BasicCar_Vehicle_C::FN_RadialForce' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Row_ShouldDropLootOnDamage) == 0x0029C0, "Member 'AValet_BasicCar_Vehicle_C::Row_ShouldDropLootOnDamage' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, LootDropDamageThresholds) == 0x0029E8, "Member 'AValet_BasicCar_Vehicle_C::LootDropDamageThresholds' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, LootDropCurentThreshold) == 0x002A10, "Member 'AValet_BasicCar_Vehicle_C::LootDropCurentThreshold' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, LootOnDamagePackage) == 0x002A14, "Member 'AValet_BasicCar_Vehicle_C::LootOnDamagePackage' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, LootTossOffset) == 0x002A18, "Member 'AValet_BasicCar_Vehicle_C::LootTossOffset' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FX_LootDropOnDamagedSpawn) == 0x002A20, "Member 'AValet_BasicCar_Vehicle_C::FX_LootDropOnDamagedSpawn' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, LootTossMin) == 0x002A28, "Member 'AValet_BasicCar_Vehicle_C::LootTossMin' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Boost_GC) == 0x002A2C, "Member 'AValet_BasicCar_Vehicle_C::Boost_GC' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Wheel_Scrape_Sparks_FX) == 0x002A30, "Member 'AValet_BasicCar_Vehicle_C::Wheel_Scrape_Sparks_FX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Wheel_Scrape_Dust_FX) == 0x002A38, "Member 'AValet_BasicCar_Vehicle_C::Wheel_Scrape_Dust_FX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, NS_TurboBoost_FX) == 0x002A40, "Member 'AValet_BasicCar_Vehicle_C::NS_TurboBoost_FX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BoostFXRotation) == 0x002A48, "Member 'AValet_BasicCar_Vehicle_C::BoostFXRotation' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, bBoostUsesQuadExhaust) == 0x002A60, "Member 'AValet_BasicCar_Vehicle_C::bBoostUsesQuadExhaust' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BoostQuadExhaustHorizontalOffset) == 0x002A64, "Member 'AValet_BasicCar_Vehicle_C::BoostQuadExhaustHorizontalOffset' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BoostJetLocationOffsetX) == 0x002A68, "Member 'AValet_BasicCar_Vehicle_C::BoostJetLocationOffsetX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BoostJetLocationOffsetZ) == 0x002A6C, "Member 'AValet_BasicCar_Vehicle_C::BoostJetLocationOffsetZ' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BoostJetFlameHeight) == 0x002A70, "Member 'AValet_BasicCar_Vehicle_C::BoostJetFlameHeight' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BoostJetFlameHeightMax) == 0x002A74, "Member 'AValet_BasicCar_Vehicle_C::BoostJetFlameHeightMax' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, NewVar_0) == 0x002A78, "Member 'AValet_BasicCar_Vehicle_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WheelWidth) == 0x002A7C, "Member 'AValet_BasicCar_Vehicle_C::WheelWidth' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WheelWidthBack) == 0x002A80, "Member 'AValet_BasicCar_Vehicle_C::WheelWidthBack' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ExhaustColor) == 0x002A84, "Member 'AValet_BasicCar_Vehicle_C::ExhaustColor' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ExhaustScale) == 0x002A94, "Member 'AValet_BasicCar_Vehicle_C::ExhaustScale' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BoostCameraActive) == 0x002A98, "Member 'AValet_BasicCar_Vehicle_C::BoostCameraActive' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, IsBoosting) == 0x002A99, "Member 'AValet_BasicCar_Vehicle_C::IsBoosting' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BoostRumbleIntensity) == 0x002A9C, "Member 'AValet_BasicCar_Vehicle_C::BoostRumbleIntensity' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MaxBoostFOV) == 0x002AA0, "Member 'AValet_BasicCar_Vehicle_C::MaxBoostFOV' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HealthPctMissingToShowDmgCrinkle) == 0x002AA4, "Member 'AValet_BasicCar_Vehicle_C::HealthPctMissingToShowDmgCrinkle' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MaxCrinkleSeverity) == 0x002AA8, "Member 'AValet_BasicCar_Vehicle_C::MaxCrinkleSeverity' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ExplosionDamageBuildings) == 0x002AB0, "Member 'AValet_BasicCar_Vehicle_C::ExplosionDamageBuildings' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, CachedExplosionDamageBuildings) == 0x002AD8, "Member 'AValet_BasicCar_Vehicle_C::CachedExplosionDamageBuildings' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ExplosionDamagePlayers) == 0x002AE0, "Member 'AValet_BasicCar_Vehicle_C::ExplosionDamagePlayers' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, CachedExplosionDamagePlayers) == 0x002B08, "Member 'AValet_BasicCar_Vehicle_C::CachedExplosionDamagePlayers' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ExplosionDamageVehicles) == 0x002B10, "Member 'AValet_BasicCar_Vehicle_C::ExplosionDamageVehicles' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, CachedExplosionDamageVehicles) == 0x002B38, "Member 'AValet_BasicCar_Vehicle_C::CachedExplosionDamageVehicles' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, GE_Explode_BuildingDamage) == 0x002B40, "Member 'AValet_BasicCar_Vehicle_C::GE_Explode_BuildingDamage' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, NS_WreckFX) == 0x002B48, "Member 'AValet_BasicCar_Vehicle_C::NS_WreckFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, VehicleExploded) == 0x002B50, "Member 'AValet_BasicCar_Vehicle_C::VehicleExploded' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HandbrakeDown_) == 0x002B51, "Member 'AValet_BasicCar_Vehicle_C::HandbrakeDown_' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, GC_ApplyTireMod) == 0x002B54, "Member 'AValet_BasicCar_Vehicle_C::GC_ApplyTireMod' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, PreFadeCleanupDelay) == 0x002B58, "Member 'AValet_BasicCar_Vehicle_C::PreFadeCleanupDelay' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, NiagaraFX_PlayerImpact) == 0x002B60, "Member 'AValet_BasicCar_Vehicle_C::NiagaraFX_PlayerImpact' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, TemplateWaterSplashFX) == 0x002B68, "Member 'AValet_BasicCar_Vehicle_C::TemplateWaterSplashFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, TemplateScrapeImpactFX) == 0x002B70, "Member 'AValet_BasicCar_Vehicle_C::TemplateScrapeImpactFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, TemplateBoostFX) == 0x002B78, "Member 'AValet_BasicCar_Vehicle_C::TemplateBoostFX' has a wrong offset!");

}

