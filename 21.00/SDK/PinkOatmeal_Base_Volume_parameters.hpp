#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PinkOatmeal_Base_Volume

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function PinkOatmeal_Base_Volume.PinkOatmeal_Base_Volume_C.UserConstructionScript
// 0x0018 (0x0018 - 0x0000)
struct PinkOatmeal_Base_Volume_C_UserConstructionScript final
{
public:
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PinkOatmeal_Base_Volume_C_UserConstructionScript) == 0x000008, "Wrong alignment on PinkOatmeal_Base_Volume_C_UserConstructionScript");
static_assert(sizeof(PinkOatmeal_Base_Volume_C_UserConstructionScript) == 0x000018, "Wrong size on PinkOatmeal_Base_Volume_C_UserConstructionScript");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue) == 0x000000, "Member 'PinkOatmeal_Base_Volume_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function PinkOatmeal_Base_Volume.PinkOatmeal_Base_Volume_C.OnActorExitPinkOatmeal
// 0x0020 (0x0020 - 0x0000)
struct PinkOatmeal_Base_Volume_C_OnActorExitPinkOatmeal final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        ActorComponent;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  InstigatorPawn;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortVolume*                            Volume;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PinkOatmeal_Base_Volume_C_OnActorExitPinkOatmeal) == 0x000008, "Wrong alignment on PinkOatmeal_Base_Volume_C_OnActorExitPinkOatmeal");
static_assert(sizeof(PinkOatmeal_Base_Volume_C_OnActorExitPinkOatmeal) == 0x000020, "Wrong size on PinkOatmeal_Base_Volume_C_OnActorExitPinkOatmeal");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_OnActorExitPinkOatmeal, Actor) == 0x000000, "Member 'PinkOatmeal_Base_Volume_C_OnActorExitPinkOatmeal::Actor' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_OnActorExitPinkOatmeal, ActorComponent) == 0x000008, "Member 'PinkOatmeal_Base_Volume_C_OnActorExitPinkOatmeal::ActorComponent' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_OnActorExitPinkOatmeal, InstigatorPawn) == 0x000010, "Member 'PinkOatmeal_Base_Volume_C_OnActorExitPinkOatmeal::InstigatorPawn' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_OnActorExitPinkOatmeal, Volume) == 0x000018, "Member 'PinkOatmeal_Base_Volume_C_OnActorExitPinkOatmeal::Volume' has a wrong offset!");

// Function PinkOatmeal_Base_Volume.PinkOatmeal_Base_Volume_C.OnActorEnterPinkOatmeal
// 0x0020 (0x0020 - 0x0000)
struct PinkOatmeal_Base_Volume_C_OnActorEnterPinkOatmeal final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        ActorComponent;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  InstigatorPawn;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortVolume*                            Volume;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PinkOatmeal_Base_Volume_C_OnActorEnterPinkOatmeal) == 0x000008, "Wrong alignment on PinkOatmeal_Base_Volume_C_OnActorEnterPinkOatmeal");
static_assert(sizeof(PinkOatmeal_Base_Volume_C_OnActorEnterPinkOatmeal) == 0x000020, "Wrong size on PinkOatmeal_Base_Volume_C_OnActorEnterPinkOatmeal");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_OnActorEnterPinkOatmeal, Actor) == 0x000000, "Member 'PinkOatmeal_Base_Volume_C_OnActorEnterPinkOatmeal::Actor' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_OnActorEnterPinkOatmeal, ActorComponent) == 0x000008, "Member 'PinkOatmeal_Base_Volume_C_OnActorEnterPinkOatmeal::ActorComponent' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_OnActorEnterPinkOatmeal, InstigatorPawn) == 0x000010, "Member 'PinkOatmeal_Base_Volume_C_OnActorEnterPinkOatmeal::InstigatorPawn' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_OnActorEnterPinkOatmeal, Volume) == 0x000018, "Member 'PinkOatmeal_Base_Volume_C_OnActorEnterPinkOatmeal::Volume' has a wrong offset!");

// Function PinkOatmeal_Base_Volume.PinkOatmeal_Base_Volume_C.GetBubbleRadius
// 0x0018 (0x0018 - 0x0000)
struct PinkOatmeal_Base_Volume_C_GetBubbleRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PinkOatmeal_Base_Volume_C_GetBubbleRadius) == 0x000004, "Wrong alignment on PinkOatmeal_Base_Volume_C_GetBubbleRadius");
static_assert(sizeof(PinkOatmeal_Base_Volume_C_GetBubbleRadius) == 0x000018, "Wrong size on PinkOatmeal_Base_Volume_C_GetBubbleRadius");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_GetBubbleRadius, Radius) == 0x000000, "Member 'PinkOatmeal_Base_Volume_C_GetBubbleRadius::Radius' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_GetBubbleRadius, CallFunc_BreakVector_X) == 0x000004, "Member 'PinkOatmeal_Base_Volume_C_GetBubbleRadius::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_GetBubbleRadius, CallFunc_BreakVector_Y) == 0x000008, "Member 'PinkOatmeal_Base_Volume_C_GetBubbleRadius::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_GetBubbleRadius, CallFunc_BreakVector_Z) == 0x00000C, "Member 'PinkOatmeal_Base_Volume_C_GetBubbleRadius::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_GetBubbleRadius, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000010, "Member 'PinkOatmeal_Base_Volume_C_GetBubbleRadius::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_GetBubbleRadius, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000014, "Member 'PinkOatmeal_Base_Volume_C_GetBubbleRadius::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function PinkOatmeal_Base_Volume.PinkOatmeal_Base_Volume_C.ExecuteUbergraph_PinkOatmeal_Base_Volume
// 0x01B0 (0x01B0 - 0x0000)
struct PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Athena_CheckCreativeMode_CanCompleteQuest; // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_Actor;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        K2Node_CustomEvent_ActorComponent;                 // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_CustomEvent_InstigatorPawn;                 // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortVolume*                            K2Node_CustomEvent_Volume;                         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerPawn_Athena_C*                   K2Node_DynamicCast_AsPlayer_Pawn_Athena;           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_Actor_1;                        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        K2Node_CustomEvent_ActorComponent_1;               // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_CustomEvent_InstigatorPawn_1;               // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortVolume*                            K2Node_CustomEvent_Volume_1;                       // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_ApplyGlobalEnvironmentGameplayEffectToActor_ReturnValue; // 0x0088(0x0008)(NoDestructor, HasGetValueTypeHash)
	class APlayerPawn_Athena_C*                   K2Node_DynamicCast_AsPlayer_Pawn_Athena_1;         // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue;    // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_ReturnValue;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x00D0(0x00E0)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume) == 0x000008, "Wrong alignment on PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume");
static_assert(sizeof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume) == 0x0001B0, "Wrong size on PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, EntryPoint) == 0x000000, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::EntryPoint' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000008, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, K2Node_ComponentBoundEvent_OtherActor) == 0x000010, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, K2Node_ComponentBoundEvent_OtherComp) == 0x000018, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000020, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, CallFunc_GetGameState_ReturnValue) == 0x000028, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, CallFunc_Athena_CheckCreativeMode_CanCompleteQuest) == 0x000030, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::CallFunc_Athena_CheckCreativeMode_CanCompleteQuest' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, K2Node_CustomEvent_Actor) == 0x000038, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::K2Node_CustomEvent_Actor' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, K2Node_CustomEvent_ActorComponent) == 0x000040, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::K2Node_CustomEvent_ActorComponent' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, K2Node_CustomEvent_InstigatorPawn) == 0x000048, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::K2Node_CustomEvent_InstigatorPawn' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, K2Node_CustomEvent_Volume) == 0x000050, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::K2Node_CustomEvent_Volume' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, K2Node_DynamicCast_AsPlayer_Pawn_Athena) == 0x000058, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::K2Node_DynamicCast_AsPlayer_Pawn_Athena' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, K2Node_CustomEvent_Actor_1) == 0x000068, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::K2Node_CustomEvent_Actor_1' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, K2Node_CustomEvent_ActorComponent_1) == 0x000070, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::K2Node_CustomEvent_ActorComponent_1' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, K2Node_CustomEvent_InstigatorPawn_1) == 0x000078, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::K2Node_CustomEvent_InstigatorPawn_1' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, K2Node_CustomEvent_Volume_1) == 0x000080, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::K2Node_CustomEvent_Volume_1' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, CallFunc_ApplyGlobalEnvironmentGameplayEffectToActor_ReturnValue) == 0x000088, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::CallFunc_ApplyGlobalEnvironmentGameplayEffectToActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, K2Node_DynamicCast_AsPlayer_Pawn_Athena_1) == 0x000090, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::K2Node_DynamicCast_AsPlayer_Pawn_Athena_1' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, K2Node_DynamicCast_bSuccess_1) == 0x000098, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, CallFunc_GetAbilitySystemComponent_ReturnValue) == 0x0000A0, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::CallFunc_GetAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, CallFunc_IsDead_ReturnValue) == 0x0000A8, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::CallFunc_IsDead_ReturnValue' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x0000B0, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, K2Node_ComponentBoundEvent_OtherActor_1) == 0x0000B8, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, K2Node_ComponentBoundEvent_OtherComp_1) == 0x0000C0, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x0000C8, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, K2Node_ComponentBoundEvent_bFromSweep) == 0x0000CC, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume, K2Node_ComponentBoundEvent_SweepResult) == 0x0000D0, "Member 'PinkOatmeal_Base_Volume_C_ExecuteUbergraph_PinkOatmeal_Base_Volume::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");

// Function PinkOatmeal_Base_Volume.PinkOatmeal_Base_Volume_C.BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function PinkOatmeal_Base_Volume.PinkOatmeal_Base_Volume_C.BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x0100 (0x0100 - 0x0000)
struct PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000100, "Wrong size on PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'PinkOatmeal_Base_Volume_C_BndEvt__BoundsComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

}

