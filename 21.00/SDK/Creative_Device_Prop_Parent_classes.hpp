#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Creative_Device_Prop_Parent

#include "Basic.hpp"

#include "EEnabledOnPhase_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "EVisibleInGameState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Creative_Device_Prop_Parent.Creative_Device_Prop_Parent_C
// 0x0090 (0x0F10 - 0x0E80)
class ACreative_Device_Prop_Parent_C final : public AFortCreativeDeviceProp
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0E80(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCreative_VisibleInGame_Component_C*    VisibleInGameComponent;                            // 0x0E88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCreative_Enabled_Component_C*          EnabledComponent;                                  // 0x0E90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortMinigameProgressComponent*         FortMinigameProgress;                              // 0x0E98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UToyOptionsComponent_C*                 ToyOptionsComponent;                               // 0x0EA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         ActivateOnGamePhase;                               // 0x0EA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortMinigameState                            ActivateOnPhase;                                   // 0x0EAC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EAD[0x3];                                      // 0x0EAD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EnabledIndex;                                      // 0x0EB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EB4[0x4];                                      // 0x0EB4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              On_Device_Activated;                               // 0x0EB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AController*                            Instigating_Controller;                            // 0x0EC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEnabledOnPhase                               EnabledDuringPhase;                                // 0x0ED0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsVisible;                                        // 0x0ED1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ED2[0x6];                                      // 0x0ED2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              On_Device_Initialized;                             // 0x0ED8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(bool New_Play_Mode)> On_Play_Mode_Changed;                              // 0x0EE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Update_on_Minigame_State_Change;                   // 0x0EF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Update_on_Play_Mode_Changed;                       // 0x0EF9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Initialize_during_Preview;                         // 0x0EFA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EFB[0x1];                                      // 0x0EFB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxHealth;                                         // 0x0EFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            MaxHealthEffectHandler;                            // 0x0F00(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Initialize_for_Editor;                             // 0x0F08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMigratedEnabledIndex;                             // 0x0F09(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMigratedActivateOnGamePhase;                      // 0x0F0A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void Update_Visibility_In_Game();
	void Update_Preview_Only_Visibility();
	void ResetHealthIfSet();
	void ReceiveBeginPlay();
	void Play_Mode_Changed(class AFortMinigame* Minigame, bool bIsInPlayMode);
	void OnWorldReady();
	void OnMinigameStarted();
	void OnMinigameEnded();
	void On_Mingame_State_Changed(class AFortMinigame* Minigame, EFortMinigameState MinigameState);
	void MigrateLegacyEnabledIndex(bool* MigratedProperties);
	void MigrateLegacyDeviceParentUserOptions(bool bMigrateEnabledIndex, bool bMigrateActivateOnPhase);
	void MigrateLegacyActivateOnGamePhase(bool* MigratedProperties);
	void LegacyIntToEnabledPhaseEnum(int32 LegacyInteger, EEnabledOnPhase* EnabledPhase);
	void Is_Visible_In_Game(bool* Visible);
	void Initialize_Device();
	void GetVisibilityComponentsWithCollisionOverrides(TMap<class USceneComponent*, ECollisionEnabled>* VisibilityComponents);
	void GetVisibilityComponents(TArray<class USceneComponent*>* VisibilityComponents);
	void ExecuteUbergraph_Creative_Device_Prop_Parent(int32 EntryPoint);
	void EnabledPhaseEnumToLegacyInt(uint8 EnabledPhase, int32* LegacyInteger);
	void BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_3_AnyPropertyChangedDelegate__DelegateSignature();
	void BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_2_AnyPropertyChangedDelegate__DelegateSignature();
	void BndEvt__FortMinigameProgress_K2Node_ComponentBoundEvent_5_SimpleDynamicMulticastDelegate__DelegateSignature();
	void BndEvt__FortMinigameProgress_K2Node_ComponentBoundEvent_4_OnMinigameAssignmentChanged__DelegateSignature(class AFortMinigame* Minigame);
	void BndEvt__FortMinigameProgress_K2Node_ComponentBoundEvent_1_OnMinigameAssignmentChanged__DelegateSignature(class AFortMinigame* Minigame);
	void BndEvt__FortMinigameProgress_K2Node_ComponentBoundEvent_0_SimpleDynamicMulticastDelegate__DelegateSignature();
	bool BlueprintOnLocalInteract(class AFortPlayerPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted);
	float BlueprintModifyIncomingDamage(float Damage, const struct FGameplayTagContainer& InTags, const struct FGameplayEffectContextHandle& EffectContext, class AController* EventInstigator, class AActor* DamageCauser);
	void Attempt_Activate_Device(class AController* Instigating_Controller_0, bool Additional_Requirements);
	void Activate_on_Phase(EFortMinigameState State);
	void Activate_Device_Failed();
	void Activate_Device();

	void IsInPlayMode(bool* bIsInPlayMode) const;
	void GetMoveToolPreviewComponents(TArray<class USceneComponent*>* ForceHideInPreview, TArray<class USceneComponent*>* ForceShowInPreview) const;
	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Creative_Device_Prop_Parent_C">();
	}
	static class ACreative_Device_Prop_Parent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACreative_Device_Prop_Parent_C>();
	}
};
static_assert(alignof(ACreative_Device_Prop_Parent_C) == 0x000008, "Wrong alignment on ACreative_Device_Prop_Parent_C");
static_assert(sizeof(ACreative_Device_Prop_Parent_C) == 0x000F10, "Wrong size on ACreative_Device_Prop_Parent_C");
static_assert(offsetof(ACreative_Device_Prop_Parent_C, UberGraphFrame) == 0x000E80, "Member 'ACreative_Device_Prop_Parent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ACreative_Device_Prop_Parent_C, VisibleInGameComponent) == 0x000E88, "Member 'ACreative_Device_Prop_Parent_C::VisibleInGameComponent' has a wrong offset!");
static_assert(offsetof(ACreative_Device_Prop_Parent_C, EnabledComponent) == 0x000E90, "Member 'ACreative_Device_Prop_Parent_C::EnabledComponent' has a wrong offset!");
static_assert(offsetof(ACreative_Device_Prop_Parent_C, FortMinigameProgress) == 0x000E98, "Member 'ACreative_Device_Prop_Parent_C::FortMinigameProgress' has a wrong offset!");
static_assert(offsetof(ACreative_Device_Prop_Parent_C, ToyOptionsComponent) == 0x000EA0, "Member 'ACreative_Device_Prop_Parent_C::ToyOptionsComponent' has a wrong offset!");
static_assert(offsetof(ACreative_Device_Prop_Parent_C, ActivateOnGamePhase) == 0x000EA8, "Member 'ACreative_Device_Prop_Parent_C::ActivateOnGamePhase' has a wrong offset!");
static_assert(offsetof(ACreative_Device_Prop_Parent_C, ActivateOnPhase) == 0x000EAC, "Member 'ACreative_Device_Prop_Parent_C::ActivateOnPhase' has a wrong offset!");
static_assert(offsetof(ACreative_Device_Prop_Parent_C, EnabledIndex) == 0x000EB0, "Member 'ACreative_Device_Prop_Parent_C::EnabledIndex' has a wrong offset!");
static_assert(offsetof(ACreative_Device_Prop_Parent_C, On_Device_Activated) == 0x000EB8, "Member 'ACreative_Device_Prop_Parent_C::On_Device_Activated' has a wrong offset!");
static_assert(offsetof(ACreative_Device_Prop_Parent_C, Instigating_Controller) == 0x000EC8, "Member 'ACreative_Device_Prop_Parent_C::Instigating_Controller' has a wrong offset!");
static_assert(offsetof(ACreative_Device_Prop_Parent_C, EnabledDuringPhase) == 0x000ED0, "Member 'ACreative_Device_Prop_Parent_C::EnabledDuringPhase' has a wrong offset!");
static_assert(offsetof(ACreative_Device_Prop_Parent_C, bIsVisible) == 0x000ED1, "Member 'ACreative_Device_Prop_Parent_C::bIsVisible' has a wrong offset!");
static_assert(offsetof(ACreative_Device_Prop_Parent_C, On_Device_Initialized) == 0x000ED8, "Member 'ACreative_Device_Prop_Parent_C::On_Device_Initialized' has a wrong offset!");
static_assert(offsetof(ACreative_Device_Prop_Parent_C, On_Play_Mode_Changed) == 0x000EE8, "Member 'ACreative_Device_Prop_Parent_C::On_Play_Mode_Changed' has a wrong offset!");
static_assert(offsetof(ACreative_Device_Prop_Parent_C, Update_on_Minigame_State_Change) == 0x000EF8, "Member 'ACreative_Device_Prop_Parent_C::Update_on_Minigame_State_Change' has a wrong offset!");
static_assert(offsetof(ACreative_Device_Prop_Parent_C, Update_on_Play_Mode_Changed) == 0x000EF9, "Member 'ACreative_Device_Prop_Parent_C::Update_on_Play_Mode_Changed' has a wrong offset!");
static_assert(offsetof(ACreative_Device_Prop_Parent_C, Initialize_during_Preview) == 0x000EFA, "Member 'ACreative_Device_Prop_Parent_C::Initialize_during_Preview' has a wrong offset!");
static_assert(offsetof(ACreative_Device_Prop_Parent_C, MaxHealth) == 0x000EFC, "Member 'ACreative_Device_Prop_Parent_C::MaxHealth' has a wrong offset!");
static_assert(offsetof(ACreative_Device_Prop_Parent_C, MaxHealthEffectHandler) == 0x000F00, "Member 'ACreative_Device_Prop_Parent_C::MaxHealthEffectHandler' has a wrong offset!");
static_assert(offsetof(ACreative_Device_Prop_Parent_C, Initialize_for_Editor) == 0x000F08, "Member 'ACreative_Device_Prop_Parent_C::Initialize_for_Editor' has a wrong offset!");
static_assert(offsetof(ACreative_Device_Prop_Parent_C, bMigratedEnabledIndex) == 0x000F09, "Member 'ACreative_Device_Prop_Parent_C::bMigratedEnabledIndex' has a wrong offset!");
static_assert(offsetof(ACreative_Device_Prop_Parent_C, bMigratedActivateOnGamePhase) == 0x000F0A, "Member 'ACreative_Device_Prop_Parent_C::bMigratedActivateOnGamePhase' has a wrong offset!");

}

