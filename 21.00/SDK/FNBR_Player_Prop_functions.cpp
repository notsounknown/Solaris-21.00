#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FNBR_Player_Prop

#include "Basic.hpp"

#include "FNBR_Player_Prop_classes.hpp"
#include "FNBR_Player_Prop_parameters.hpp"


namespace SDK
{

// Function FNBR_Player_Prop.FNBR_Player_Prop_C.WPOTransitionTL__UpdateFunc
// (BlueprintEvent)

void AFNBR_Player_Prop_C::WPOTransitionTL__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "WPOTransitionTL__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.WPOTransitionTL__FinishedFunc
// (BlueprintEvent)

void AFNBR_Player_Prop_C::WPOTransitionTL__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "WPOTransitionTL__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.VerifyPropVisibility
// (Public, BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::VerifyPropVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "VerifyPropVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.UpdateVisibility
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::UpdateVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "UpdateVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.UI Countdown Timer Event
// (BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::UI_Countdown_Timer_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "UI Countdown Timer Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.TransitionVFX
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ETimelineDirection                      Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFNBR_Player_Prop_C::TransitionVFX(ETimelineDirection Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "TransitionVFX");

	Params::FNBR_Player_Prop_C_TransitionVFX Parms{};

	Parms.Direction = Direction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.TransitionToIntermediateTL__UpdateFunc
// (BlueprintEvent)

void AFNBR_Player_Prop_C::TransitionToIntermediateTL__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "TransitionToIntermediateTL__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.TransitionToIntermediateTL__FinishedFunc
// (BlueprintEvent)

void AFNBR_Player_Prop_C::TransitionToIntermediateTL__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "TransitionToIntermediateTL__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.Terminate
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::Terminate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "Terminate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.SyncToHintTimer
// (BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::SyncToHintTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "SyncToHintTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.StartHidingHintSound
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::StartHidingHintSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "StartHidingHintSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.SetupTimer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time_Remaining                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFNBR_Player_Prop_C::SetupTimer(float Time_Remaining)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "SetupTimer");

	Params::FNBR_Player_Prop_C_SetupTimer Parms{};

	Parms.Time_Remaining = Time_Remaining;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.SetScale
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          NewScale                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFNBR_Player_Prop_C::SetScale(const struct FVector& NewScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "SetScale");

	Params::FNBR_Player_Prop_C_SetScale Parms{};

	Parms.NewScale = std::move(NewScale);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.SetPropPlaced
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewPlaced                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlacedYawOffset                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFNBR_Player_Prop_C::SetPropPlaced(bool NewPlaced, float PlacedYawOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "SetPropPlaced");

	Params::FNBR_Player_Prop_C_SetPropPlaced Parms{};

	Parms.NewPlaced = NewPlaced;
	Parms.PlacedYawOffset = PlacedYawOffset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.SetProp
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SelectedProp                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerPawn_Athena_C*             PlayerPawnToAttachTo                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaleDuration                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFNBR_Player_Prop_C::SetProp(class AActor* SelectedProp, class APlayerPawn_Athena_C* PlayerPawnToAttachTo, float ScaleDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "SetProp");

	Params::FNBR_Player_Prop_C_SetProp Parms{};

	Parms.SelectedProp = SelectedProp;
	Parms.PlayerPawnToAttachTo = PlayerPawnToAttachTo;
	Parms.ScaleDuration = ScaleDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.SetMaxHealth
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewMaxHealth                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFNBR_Player_Prop_C::SetMaxHealth(float NewMaxHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "SetMaxHealth");

	Params::FNBR_Player_Prop_C_SetMaxHealth Parms{};

	Parms.NewMaxHealth = NewMaxHealth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.SetCapsuleRadius
// (Public, BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::SetCapsuleRadius()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "SetCapsuleRadius");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.ServerTimerReset
// (BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::ServerTimerReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "ServerTimerReset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.ServerSetPlaced
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewPlaced                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PlacedYawOffset                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFNBR_Player_Prop_C::ServerSetPlaced(bool NewPlaced, float PlacedYawOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "ServerSetPlaced");

	Params::FNBR_Player_Prop_C_ServerSetPlaced Parms{};

	Parms.NewPlaced = NewPlaced;
	Parms.PlacedYawOffset = PlacedYawOffset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.ScaleLerp
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::ScaleLerp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "ScaleLerp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFNBR_Player_Prop_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "ReceiveEndPlay");

	Params::FNBR_Player_Prop_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AFNBR_Player_Prop_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.PlayHintSound
// (BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::PlayHintSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "PlayHintSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.Play Prop Removed Sound
// (Public, BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::Play_Prop_Removed_Sound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "Play Prop Removed Sound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.OnRep_SoundTimeRemaining
// (BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::OnRep_SoundTimeRemaining()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "OnRep_SoundTimeRemaining");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.OnRep_ScalePercent
// (BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::OnRep_ScalePercent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "OnRep_ScalePercent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.OnRep_PawnAttachedTo
// (BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::OnRep_PawnAttachedTo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "OnRep_PawnAttachedTo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.OnRep_NewCapsuleRadius
// (BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::OnRep_NewCapsuleRadius()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "OnRep_NewCapsuleRadius");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.OnRep_FinalScale
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::OnRep_FinalScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "OnRep_FinalScale");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.OnRep_CopiedProp
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::OnRep_CopiedProp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "OnRep_CopiedProp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.OnRep_bShouldBeHiding
// (BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::OnRep_bShouldBeHiding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "OnRep_bShouldBeHiding");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.OnDeathServer
// (BlueprintAuthorityOnly, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTagContainer            DamageTags                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FVector                          Momentum                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitInfo                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayEffectContextHandle     EffectContext                                          (BlueprintVisible, BlueprintReadOnly, Parm)

void AFNBR_Player_Prop_C::OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "OnDeathServer");

	Params::FNBR_Player_Prop_C_OnDeathServer Parms{};

	Parms.Damage = Damage;
	Parms.DamageTags = std::move(DamageTags);
	Parms.Momentum = std::move(Momentum);
	Parms.HitInfo = std::move(HitInfo);
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.EffectContext = std::move(EffectContext);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.MulticastSetStaticMesh
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerPawn_Athena_C*             PlayerPawnToAttachTo                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaleDuration                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          BoundsExtent_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFNBR_Player_Prop_C::MulticastSetStaticMesh(class APlayerPawn_Athena_C* PlayerPawnToAttachTo, float ScaleDuration, const struct FVector& BoundsExtent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "MulticastSetStaticMesh");

	Params::FNBR_Player_Prop_C_MulticastSetStaticMesh Parms{};

	Parms.PlayerPawnToAttachTo = PlayerPawnToAttachTo;
	Parms.ScaleDuration = ScaleDuration;
	Parms.BoundsExtent_0 = std::move(BoundsExtent_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.InitScaleLerp
// (BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::InitScaleLerp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "InitScaleLerp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.InitializeMIDs
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::InitializeMIDs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "InitializeMIDs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.GetRelativePropSizeForHintSoundTiming
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   PropVolume                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RelativeSize                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFNBR_Player_Prop_C::GetRelativePropSizeForHintSoundTiming(float PropVolume, int32* RelativeSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "GetRelativePropSizeForHintSoundTiming");

	Params::FNBR_Player_Prop_C_GetRelativePropSizeForHintSoundTiming Parms{};

	Parms.PropVolume = PropVolume;

	UObject::ProcessEvent(Func, &Parms);

	if (RelativeSize != nullptr)
		*RelativeSize = Parms.RelativeSize;
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.GetRelativePropSizeForHealthScaling
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   PropVolume                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RelativeSize                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFNBR_Player_Prop_C::GetRelativePropSizeForHealthScaling(float PropVolume, int32* RelativeSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "GetRelativePropSizeForHealthScaling");

	Params::FNBR_Player_Prop_C_GetRelativePropSizeForHealthScaling Parms{};

	Parms.PropVolume = PropVolume;

	UObject::ProcessEvent(Func, &Parms);

	if (RelativeSize != nullptr)
		*RelativeSize = Parms.RelativeSize;
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.GetPropHuntSettings
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PropPossessorConfigProp_C*    Settings                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Exists                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFNBR_Player_Prop_C::GetPropHuntSettings(class ABP_PropPossessorConfigProp_C** Settings, bool* Exists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "GetPropHuntSettings");

	Params::FNBR_Player_Prop_C_GetPropHuntSettings Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Settings != nullptr)
		*Settings = Parms.Settings;

	if (Exists != nullptr)
		*Exists = Parms.Exists;
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.FinishScaleLerp
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::FinishScaleLerp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "FinishScaleLerp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.FinishPropSetup
// (BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::FinishPropSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "FinishPropSetup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.ExecuteUbergraph_FNBR_Player_Prop
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFNBR_Player_Prop_C::ExecuteUbergraph_FNBR_Player_Prop(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "ExecuteUbergraph_FNBR_Player_Prop");

	Params::FNBR_Player_Prop_C_ExecuteUbergraph_FNBR_Player_Prop Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.End Prop Possession
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::End_Prop_Possession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "End Prop Possession");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.DoPawnRelatedInitialization
// (Public, BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::DoPawnRelatedInitialization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "DoPawnRelatedInitialization");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.CalculatePropVolume
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   MeshVolume                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFNBR_Player_Prop_C::CalculatePropVolume(float* MeshVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "CalculatePropVolume");

	Params::FNBR_Player_Prop_C_CalculatePropVolume Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MeshVolume != nullptr)
		*MeshVolume = Parms.MeshVolume;
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_3_SimpleDynamicMulticastDelegate__DelegateSignature
// (BlueprintEvent)

void AFNBR_Player_Prop_C::BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_3_SimpleDynamicMulticastDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_3_SimpleDynamicMulticastDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_2_SimpleDynamicMulticastDelegate__DelegateSignature
// (BlueprintEvent)

void AFNBR_Player_Prop_C::BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_2_SimpleDynamicMulticastDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_2_SimpleDynamicMulticastDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.AddPropsToItemsSpecificBlackList
// (BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::AddPropsToItemsSpecificBlackList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "AddPropsToItemsSpecificBlackList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.AddItemSpecificBlacklistTagToProp
// (BlueprintCallable, BlueprintEvent)

void AFNBR_Player_Prop_C::AddItemSpecificBlacklistTagToProp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "AddItemSpecificBlacklistTagToProp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FNBR_Player_Prop.FNBR_Player_Prop_C.CalcPropOffset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          PropOffset                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFNBR_Player_Prop_C::CalcPropOffset(struct FVector* PropOffset) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNBR_Player_Prop_C", "CalcPropOffset");

	Params::FNBR_Player_Prop_C_CalcPropOffset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PropOffset != nullptr)
		*PropOffset = std::move(Parms.PropOffset);
}

}

