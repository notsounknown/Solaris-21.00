#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_CreativeMoveTool_Athena

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "B_CreativeInteractionTool_Base_classes.hpp"
#include "B_CreativeMoveTool_VisualState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_CreativeMoveTool_Athena.B_CreativeMoveTool_Athena_C
// 0x0070 (0x1D40 - 0x1CD0)
class AB_CreativeMoveTool_Athena_C final : public AB_CreativeInteractionTool_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_B_CreativeMoveTool_Athena_C;        // 0x1CD0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCreativeInteraction_PlaysetPreview_C*  CreativeInteraction_PlaysetPreview;                // 0x1CD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCreativeInteraction_MoveObjectsFreely_C* CreativeInteraction_MoveObjectsFreely;             // 0x1CE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCreativeInteraction_Delete_C*          CreativeInteraction_Delete;                        // 0x1CE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCreativeInteraction_MoveBuildingsOnGrid_C* CreativeInteraction_MoveBuildingsOnGrid;           // 0x1CF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          HasPlayedHitTraceRuleSound;                        // 0x1CF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CF9[0x7];                                     // 0x1CF9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool AllowGravity)> GravityToggleChanged;                              // 0x1D00(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Multi_Selected_Count;                              // 0x1D10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWasScaling;                                       // 0x1D14(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D15[0x3];                                     // 0x1D15(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         PosessedActorsForPlacementPrevious;                // 0x1D18(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<bool>                                  IsPosessedActorPlacementValidPrevious;             // 0x1D28(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         MultiselectHighlightDelay;                         // 0x1D38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateRotationAxis(uint8 Rotation_Axis);
	void UpdatePreviewerRotationGuides(class AB_CreativeMoveTool_BlueprintPreviewer_C* BlueprintPreviewer);
	void TrackValidPlacements(class AActor* ActorForPlacement, bool ValidPlacement);
	void SpawnPlaysetOnPlayer(const struct FFortItemEntry& PlaysetItemEntry);
	void SetDeleteVisuals(const TArray<class UMeshComponent*>& MeshComponents);
	void ServerPlayGameplayAbility(class UObjectInteractionBehavior* ObjectInteractionBehavior, class UClass* NumSelected);
	void ScaleInsteadOfRotate(bool Scale);
	void Scale_Up_Modifier_Audio();
	void RemoveMeshComponents(TArray<class UMeshComponent*>& MeshComponents, TArray<class UMeshComponent*>& ArrayToRemoveFrom);
	void ReceiveBeginPlay();
	void PlayPrecisionFX(bool On, uint8 PrecisionLevel);
	void OnValidPlacementChangedActorInstance(class AActor* ActorForPlacement, bool ValidPlacement);
	void OnValidPlacementChanged(bool bValidPlacement);
	void OnSelectedActorsCleared_Event();
	void OnRemoveHighlightSelectedActor(class AActor* SelectedActor_0, const TArray<class UMeshComponent*>& SelectedComponents);
	void OnObjectPlacement(const TArray<class UMeshComponent*>& Components, const struct FOriginalAndSpawnedPair& NewlyPlacedActorPair);
	void OnLoaded_E3775BA448F14810E251D0B6CF812D21(class UObject* Loaded);
	void OnLoaded_E3775BA448F14810E251D0B6517A6B04(class UObject* Loaded);
	void OnLoaded_E3775BA448F14810E251D0B640BB258B(class UObject* Loaded);
	void OnHighlightSelectedActor(class AActor* SelectedActor_0, const TArray<class UMeshComponent*>& SelectedComponents);
	void OnAllowGravityToggleChanged(bool bAllowGravity);
	void IsComponentStillHighlighted(TArray<class UMeshComponent*>& MeshComponents, bool* Value);
	void HandleScaleUpReleased();
	void HandleScaleUpPressed();
	void HandleScaleSwitchAxisPressed();
	void HandleScaleDownReleased();
	void HandleScaleDownPressed();
	void HandleRotateSwitchAxisPressed();
	void HandleRotateSingleCounterclockwiseReleased();
	void HandleRotateSingleCounterclockwisePressed();
	void HandleRotateSingleClockwiseReleased();
	void HandleRotateSingleClockwisePressed();
	void HandleRotateCounterclockwiseReleased();
	void HandleRotateCounterclockwisePressed();
	void HandleRotateClockwiseReleased();
	void HandleRotateClockwisePressed();
	void HandleResetScalePressed();
	void HandleResetRotationPressed();
	void HandlePushPressed();
	void HandlePullPressed();
	void HandlePrecisionModeReleased();
	void HandlePrecisionModePressed();
	void HandlePlaysetSelected(const struct FFortItemEntry& PlaysetItemEntry);
	void HandleHitTraceRulePressed();
	void HandleHitTraceRuleHeldDownLongEnough();
	void HandleExitHeldDownLongEnough();
	void HandleDropToFloorPressed();
	void HandleCopyPickupPressed();
	void HandleClearMultiSelectQueuePressed();
	void HandleAddToQuickBarPressed_1();
	void ExecuteUbergraph_B_CreativeMoveTool_Athena(int32 EntryPoint);
	void EventOnRemovedSelectedActor(class AActor* Actor, int32 NumSelected);
	void EventOnCouldNotAddActor(class AActor* Actor, int32 NumSelected);
	void EventOnAddedSelectedActor(class AActor* Actor, int32 NumSelected);
	void CallEventOnValidPlacementChanged(bool ValidPlacement);
	void AddMeshComponents_(TArray<class UMeshComponent*>& MeshComponents, TArray<class UMeshComponent*>& ArrayToAddTo);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_CreativeMoveTool_Athena_C">();
	}
	static class AB_CreativeMoveTool_Athena_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_CreativeMoveTool_Athena_C>();
	}
};
static_assert(alignof(AB_CreativeMoveTool_Athena_C) == 0x000010, "Wrong alignment on AB_CreativeMoveTool_Athena_C");
static_assert(sizeof(AB_CreativeMoveTool_Athena_C) == 0x001D40, "Wrong size on AB_CreativeMoveTool_Athena_C");
static_assert(offsetof(AB_CreativeMoveTool_Athena_C, UberGraphFrame_B_CreativeMoveTool_Athena_C) == 0x001CD0, "Member 'AB_CreativeMoveTool_Athena_C::UberGraphFrame_B_CreativeMoveTool_Athena_C' has a wrong offset!");
static_assert(offsetof(AB_CreativeMoveTool_Athena_C, CreativeInteraction_PlaysetPreview) == 0x001CD8, "Member 'AB_CreativeMoveTool_Athena_C::CreativeInteraction_PlaysetPreview' has a wrong offset!");
static_assert(offsetof(AB_CreativeMoveTool_Athena_C, CreativeInteraction_MoveObjectsFreely) == 0x001CE0, "Member 'AB_CreativeMoveTool_Athena_C::CreativeInteraction_MoveObjectsFreely' has a wrong offset!");
static_assert(offsetof(AB_CreativeMoveTool_Athena_C, CreativeInteraction_Delete) == 0x001CE8, "Member 'AB_CreativeMoveTool_Athena_C::CreativeInteraction_Delete' has a wrong offset!");
static_assert(offsetof(AB_CreativeMoveTool_Athena_C, CreativeInteraction_MoveBuildingsOnGrid) == 0x001CF0, "Member 'AB_CreativeMoveTool_Athena_C::CreativeInteraction_MoveBuildingsOnGrid' has a wrong offset!");
static_assert(offsetof(AB_CreativeMoveTool_Athena_C, HasPlayedHitTraceRuleSound) == 0x001CF8, "Member 'AB_CreativeMoveTool_Athena_C::HasPlayedHitTraceRuleSound' has a wrong offset!");
static_assert(offsetof(AB_CreativeMoveTool_Athena_C, GravityToggleChanged) == 0x001D00, "Member 'AB_CreativeMoveTool_Athena_C::GravityToggleChanged' has a wrong offset!");
static_assert(offsetof(AB_CreativeMoveTool_Athena_C, Multi_Selected_Count) == 0x001D10, "Member 'AB_CreativeMoveTool_Athena_C::Multi_Selected_Count' has a wrong offset!");
static_assert(offsetof(AB_CreativeMoveTool_Athena_C, bWasScaling) == 0x001D14, "Member 'AB_CreativeMoveTool_Athena_C::bWasScaling' has a wrong offset!");
static_assert(offsetof(AB_CreativeMoveTool_Athena_C, PosessedActorsForPlacementPrevious) == 0x001D18, "Member 'AB_CreativeMoveTool_Athena_C::PosessedActorsForPlacementPrevious' has a wrong offset!");
static_assert(offsetof(AB_CreativeMoveTool_Athena_C, IsPosessedActorPlacementValidPrevious) == 0x001D28, "Member 'AB_CreativeMoveTool_Athena_C::IsPosessedActorPlacementValidPrevious' has a wrong offset!");
static_assert(offsetof(AB_CreativeMoveTool_Athena_C, MultiselectHighlightDelay) == 0x001D38, "Member 'AB_CreativeMoveTool_Athena_C::MultiselectHighlightDelay' has a wrong offset!");

}

